/*

  HashGarten 0.16.0 - a GUI to calculate and verify hashes, powered by Jacksum
  Copyright (c) 2022-2024 Dipl.-Inf. (FH) Johann N. Löfflmann,
  All Rights Reserved, <https://jacksum.net>.

  This program is free software: you can redistribute it and/or modify it under
  the terms of the GNU General Public License as published by the Free Software
  Foundation, either version 3 of the License, or (at your option) any later
  version.

  This program is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
  details.

  You should have received a copy of the GNU General Public License along with
  this program. If not, see <https://www.gnu.org/licenses/>.

 */
package net.jacksum.gui;

import net.jacksum.gui.constants.AppConstants;
import net.jacksum.gui.constants.PropertyKeys;
import net.jacksum.gui.constants.PropertyValues;
import java.awt.Dimension;
import net.jacksum.gui.util.SwingUtils;
import net.jacksum.gui.dialogs.AlgorithmSelectorDialog;
import net.jacksum.gui.handlers.DropTransferHandler;
import net.jacksum.gui.interfaces.AlgorithmSelectorDialogInterface;
import net.jacksum.gui.models.FileListModel;
import java.awt.Frame;
import java.awt.event.ItemEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.Charset;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.LookAndFeel;
import javax.swing.UnsupportedLookAndFeelException;

import net.jacksum.*;
import net.jacksum.actions.Actions;
import net.jacksum.actions.info.help.NothingFoundException;
import net.jacksum.cli.CLIParameters;
import net.jacksum.cli.StatisticsElapsedTime;
import net.jacksum.formats.Encoding;
import net.jacksum.gui.dialogs.HelpDialog;
import net.jacksum.gui.util.IO;
import net.jacksum.multicore.ThreadControl;
import net.jacksum.parameters.ParameterException;
import net.jacksum.parameters.Parameters;
import net.jacksum.statistics.Statistics;
import net.loefflmann.sugar.util.ExitException;

/**
 *
 * @author Johann N. Löfflmann
 */
public class Main extends javax.swing.JFrame implements AlgorithmSelectorDialogInterface {

    private final String[] args;
    private Parameters parameters;
    private Properties props;
    private FileListModel fileListModel;
    private AlgorithmSelectorDialog dialog;
    private HelpDialog helpDialog;
    private LookAndFeel flatDarkLaf = null;
    private LookAndFeel flatLightLaf = null;
    private String theme = PropertyValues.THEME_LIGHT;
    
    private final static String PANEL_NAME_INPUT = "Input";
    private final static String PANEL_NAME_CALCULATION = "Calculation";
    private final static String PANEL_NAME_VERIFICATION = "Verification";    
    private final static String PANEL_NAME_OUTPUT_STYLE = "Output Style";
    private final static String PANEL_NAME_OUTPUT_FILES = "Output Files";
    private final static String ACTION_BUTTON_CALCULATE_HASHES = "Calculate Hash Values";
    private final static String ACTION_BUTTON_VERIFY_HASHES = "Verify Hash Values";


    /**
     * Creates the GUI.
     *
     * @param args the program arguments
     */
    public Main(String[] args) {
        super();
        this.args = args;
        initNonGUIcomponents();
        initLookAndFeel();
        initComponents(); // all Swing GUI components, generated by Netbeans
        updateGUIfromParameters();
        updateGUIfromProperties();
        finishLookAndFeel();
        arrangeGUI();
        //this.setSize(2000,1000);
        this.setVisible(true);
        //this.pack();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main(args).setVisible(true);
        });
    }

    // this GUI takes exactly the same parameters as Jacksum
    private void initNonGUIcomponents() {
        readProperties();
        initParameters();
        this.fileListModel = buildFileListModel();
    }

    @Override
    public Frame getFrame() {
        return this;
    }

    private void initLookAndFeel() {
        theme = props.getProperty(PropertyKeys.GUI_THEME, PropertyValues.THEME_LIGHT);
        switch (theme) {
            case PropertyValues.THEME_SYSTEM:
                SwingUtils.setSystemLookAndFeel();
                break;
            case PropertyValues.THEME_NIMBUS:
                SwingUtils.setNimbusLookAndFeel();
                break;
            default:
                setDarkLookAndFeel(theme.equals(PropertyValues.THEME_DARK));
                break;
        }
    }

    private void finishLookAndFeel() {
        installDropHandlers();
        darkThemeToggleButton.setSelected(theme.equals(PropertyValues.THEME_DARK));
        setAlwaysOnTop(alwaysOnTopCheckBox.isSelected());
    }

    private void arrangeGUI() {
        this.pack();
        // if set to false explicitly, don't position the frame smart, just position it at the first window
        if (props.getProperty(PropertyKeys.GUI_SMARTPOSITIONED, PropertyValues.TRUE).trim().equalsIgnoreCase(PropertyValues.FALSE)) {
            setLocationRelativeTo(null);
        } else {
            // position the jFrame the smart way
            SwingUtils.centerJFrameOnTheDisplayWhereTheMouseIs(this);
        }
    }

    // Read properties
    private void readProperties() {
        props = new Properties();
        try ( InputStream input = new FileInputStream(AppConstants.PROPERTIES_FILE)) {
            props.load(input);
        } catch (IOException io) {
            System.err.println(io.getMessage());
        }
    }

    // Save some properties
    private void saveProperties() {
        try ( OutputStream output = new FileOutputStream(AppConstants.PROPERTIES_FILE)) {
            props.store(output, null);
        } catch (IOException io) {
            System.err.println(io.getMessage());
        }
    }

    // Overrule the command line args by the properties stored by the app
    // from an earlier run  
    private void initParameters() {

        // Parameters from Props
        Parameters parametersFromProps = null;
        if (props.getProperty(PropertyKeys.JACKSUM_PARAMETERS_BASE64) != null) {
            try {
                parametersFromProps = (Parameters) IO.base64StringToObject(props.getProperty(PropertyKeys.JACKSUM_PARAMETERS_BASE64));

                // if we have saved the location to a check file, we need to set
                // it to null, because we want to control verification mode at the GUI by command line args
                // (at the file browser integration)
                parametersFromProps.setCheckFile(null);
                parametersFromProps.getVerbose().setDefault();

                // parametersFromProps.setParameterModifiedByAPI(true);
/*
   debug("parameters from props:\n" + String.join(" ", parametersFromProps.getCLIParametersWithQuotes()));
   debug("algorithm:\n" + parametersFromProps.getAlgorithm());
   debug("algorithmIdentifier:\n" + parametersFromProps.getAlgorithmIdentifier());
                 */
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            parametersFromProps = null;
        }

        // Parameters from CLI
        Parameters parametersFromCLI = null;
        try {
            parametersFromCLI = new CLIParameters(args).parse().unchecked();
            // parsed CLIParameters return a parameters object with -h enabled
            // by default, we don't need that here
            parametersFromCLI.setHelp(false);

            // parametersFromCLI.setParameterModifiedByAPI(true);
/*
   debug("parameters from CLI:\n" + String.join(" ", parametersFromCLI.getCLIParametersWithQuotes()));
   debug("algorithm:\n" + parametersFromCLI.getAlgorithm());
   debug("algorithmIdentifier:\n" + parametersFromCLI.getAlgorithmIdentifier());
             */
        } catch (ParameterException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

        // set the parameter object member depenent to the availability of
        // parameters in the properties file and from the command line
        if (parametersFromProps != null) {
            parametersFromProps.update(parametersFromCLI);
            parameters = parametersFromProps;
        } else {
            parameters = parametersFromCLI;
        }

        try {
            parameters = parameters.checked();
            // adjust the object again, no stdin for the GUI
            parameters.setStdinForFilenamesFromArgs(false);

            // parameters.expandFileList();
            // parameters.restoreStdErr();
            // parameters.restoreStdOut();
        } catch (ParameterException | ExitException ex) {
            //} catch (ParameterException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        // parameters.setParameterModifiedByAPI(true);
/*
   debug("parameters checked:\n" + String.join(" ", parameters.getCLIParametersWithQuotes()));
   debug("algorithm:\n" + parameters.getAlgorithm());
   debug("algorithmIdentifier:\n" + parameters.getAlgorithmIdentifier());
         */
    }

    // Read values from the parameters object and update the properties object
    private void updatePropertiesFromParameters() {
        try {
            props.setProperty(PropertyKeys.JACKSUM_PARAMETERS_BASE64, IO.objectToBase64String(parameters));
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tabbedPane = new javax.swing.JTabbedPane();
        inputPanel = new javax.swing.JPanel();
        fileInputPanel = new javax.swing.JPanel();
        fileListScrollPane = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        listSortingPanel = new javax.swing.JPanel();
        moveTopButton = new javax.swing.JButton();
        moveUpButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();
        moveBottomButton = new javax.swing.JButton();
        listModificationPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        restoreButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        headerReadFilesAndDirectoriesjLabel = new javax.swing.JLabel();
        fileInputOptionsPanel = new javax.swing.JPanel();
        placeholderForReadFilesAndDirectoriesOptionsLabel = new javax.swing.JLabel();
        walkingDepthCheckBox = new javax.swing.JCheckBox();
        walkingDepthSpinner = new javax.swing.JSpinner();
        levelsWhenTraversingADirectoryLabel = new javax.swing.JLabel();
        followSymlinksToDirectoriesCheckBox = new javax.swing.JCheckBox();
        followSymlinksToFilesCheckBox = new javax.swing.JCheckBox();
        scanNtfsAdsCheckBox = new javax.swing.JCheckBox();
        readPerformancePanel = new javax.swing.JPanel();
        readingThreadsCheckBox = new javax.swing.JCheckBox();
        readingThreadsSpinner = new javax.swing.JSpinner();
        parallelThreadsLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        calculationPanel = new javax.swing.JPanel();
        integrityStrengthPanel = new javax.swing.JPanel();
        headerDataIntegrityStrengthLabel = new javax.swing.JLabel();
        algoLabel = new javax.swing.JLabel();
        algoTextField = new javax.swing.JTextField();
        selectAlgoButton = new javax.swing.JButton();
        processingOptionsPanel = new javax.swing.JPanel();
        headerDataIntegrityStrengthLabel1 = new javax.swing.JLabel();
        calculateHashesLabel1 = new javax.swing.JLabel();
        hashingThreadsSpinner = new javax.swing.JSpinner();
        calculateHashesLabel2 = new javax.swing.JLabel();
        alternativeImplemenationCheckBox = new javax.swing.JCheckBox();
        alternativeImplementationHelpButton = new javax.swing.JButton();
        threadsHashingHelpButton1 = new javax.swing.JButton();
        verificationPanel = new javax.swing.JPanel();
        integrityVerificationFilePanel = new javax.swing.JPanel();
        headerFileIntegrityVerificationLabel = new javax.swing.JLabel();
        fileVerificationLabel = new javax.swing.JLabel();
        fileVerificationTextField = new javax.swing.JTextField();
        fileVerificationSelectFileButton = new javax.swing.JButton();
        fileVerificationClearButton = new javax.swing.JButton();
        fileVerificationCharacterSetLabel = new javax.swing.JLabel();
        fileVerificationCharacterSetComboBox = new javax.swing.JComboBox<>();
        fileVerificationViewButton = new javax.swing.JButton();
        integrityVerificationFileFormatPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        styleLabel1 = new javax.swing.JLabel();
        outputStyleComboBox_verify = new javax.swing.JComboBox<>();
        verificationStyleHelpButton = new javax.swing.JButton();
        hashValueEncodingCheckBox_verify = new javax.swing.JCheckBox();
        hashValueEncodingComboBox_verify = new javax.swing.JComboBox<>();
        hashValueEncodingHelpButton1 = new javax.swing.JButton();
        includeFileSizeCheckBox_verify = new javax.swing.JCheckBox();
        filesizeHelpButton_verifiy = new javax.swing.JButton();
        includeTimestampCheckBox_verify = new javax.swing.JCheckBox();
        timestampFormatComboBox_verify = new javax.swing.JComboBox<>();
        timestampFormatTextField_verify = new javax.swing.JTextField();
        timestampHelpButton_verify = new javax.swing.JButton();
        integrityVerificationFilterPanel = new javax.swing.JPanel();
        showFilesLabel = new javax.swing.JLabel();
        showOkFilesCheckBox = new javax.swing.JCheckBox();
        showFailedFilesCheckBox = new javax.swing.JCheckBox();
        showMissingFilesCheckBox = new javax.swing.JCheckBox();
        showNewFilesCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        outputStylePanel = new javax.swing.JPanel();
        outputStyleHeaderPanel = new javax.swing.JPanel();
        printHeaderCheckBox = new javax.swing.JCheckBox();
        outputRespIntegrityInputFormatLabel = new javax.swing.JLabel();
        printHeaderHelpButton = new javax.swing.JButton();
        customizedFormatPanel = new javax.swing.JPanel();
        styleLabel = new javax.swing.JLabel();
        outputStyleComboBox = new javax.swing.JComboBox<>();
        hashValueEncodingCheckBox = new javax.swing.JCheckBox();
        hashValueEncodingComboBox = new javax.swing.JComboBox<>();
        includeFileSizeCheckBox = new javax.swing.JCheckBox();
        includeTimestampCheckBox = new javax.swing.JCheckBox();
        timestampFormatComboBox = new javax.swing.JComboBox<>();
        timestampFormatTextField = new javax.swing.JTextField();
        lineFormatCheckBox = new javax.swing.JCheckBox();
        lineFormatTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lineFormatHelpButton = new javax.swing.JButton();
        styleHelpButton = new javax.swing.JButton();
        hashValueEncodingHelpButton = new javax.swing.JButton();
        timestampHelpButton = new javax.swing.JButton();
        filesizeHelpButton = new javax.swing.JButton();
        outputStylePathFormatPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        pathStyleLabel = new javax.swing.JLabel();
        pathStyleComboBox = new javax.swing.JComboBox<>();
        pathStyleHelpButton = new javax.swing.JButton();
        pathRelativeToTextField = new javax.swing.JTextField();
        customizedPathSeparatorCheckBox = new javax.swing.JCheckBox();
        customizedPathSpearatorTextField = new javax.swing.JTextField();
        customizedPathSeparatorHelpButton = new javax.swing.JButton();
        outputFilesPanel = new javax.swing.JPanel();
        outputFilesInnerPanel = new javax.swing.JPanel();
        headerOutputFilesLabel = new javax.swing.JLabel();
        standardOutputFileLabel = new javax.swing.JLabel();
        standardOutputFileTextField = new javax.swing.JTextField();
        standardOutputViewButton = new javax.swing.JButton();
        standardErrorFileLabel = new javax.swing.JLabel();
        standardErrorFileTextField = new javax.swing.JTextField();
        standardErrorViewButton = new javax.swing.JButton();
        standardOutputFileCharacterSetLabel = new javax.swing.JLabel();
        standardOutputFileCharacterSetComboBox = new javax.swing.JComboBox<>();
        standardErrorFileCharacterSetLabel = new javax.swing.JLabel();
        standardErrorFileCharacterSetComboBox = new javax.swing.JComboBox<>();
        outputFilesOptionsPanel = new javax.swing.JPanel();
        placeholderForOutputFilesOptionsLabel = new javax.swing.JLabel();
        bomCheckBox = new javax.swing.JCheckBox();
        guiOptionsPanel = new javax.swing.JPanel();
        themePanel = new javax.swing.JPanel();
        themeLabel = new javax.swing.JLabel();
        darkThemeToggleButton = new javax.swing.JToggleButton();
        guiPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        alwaysOnTopCheckBox = new javax.swing.JCheckBox();
        stayOpenCheckBox = new javax.swing.JCheckBox();
        centerWindowWhereTheMouseIsCheckBox = new javax.swing.JCheckBox();
        actionPanel = new javax.swing.JPanel();
        actionButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        preferencesMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        modeMenu = new javax.swing.JMenu();
        calcMenuItem = new javax.swing.JMenuItem();
        verifyMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        homepageHashGartenMenuItem = new javax.swing.JMenuItem();
        reportIssueHashGartenMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        manpageJacksumMenuItem = new javax.swing.JMenuItem();
        homepageJacksumMenuItem = new javax.swing.JMenuItem();
        reportIssueJacksumMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(String.format("HashGarten %s", AppConstants.VERSION));
        setAlwaysOnTop(true);
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix32x32/jacksum-32x32.png")).getImage());
        setMinimumSize(new java.awt.Dimension(600, 0));
        setName("HashGarten"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        fileInputPanel.setMaximumSize(new java.awt.Dimension(400, 32767));

        fileList.setModel(fileListModel);
        fileList.setToolTipText("Drag and drop files and directories here.");
        fileList.setDropMode(javax.swing.DropMode.INSERT);
        fileListScrollPane.setViewportView(fileList);

        moveTopButton.setText("Top");
        moveTopButton.setToolTipText("Move selected line to the top of the list");
        moveTopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveTopButtonActionPerformed(evt);
            }
        });

        moveUpButton.setText("Up");
        moveUpButton.setToolTipText("Move selected line up");
        moveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpButtonActionPerformed(evt);
            }
        });

        moveDownButton.setText("Down");
        moveDownButton.setToolTipText("Move selected line down");
        moveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownButtonActionPerformed(evt);
            }
        });

        moveBottomButton.setText("Bottom");
        moveBottomButton.setToolTipText("Move selected line to the bottom of the list");
        moveBottomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBottomButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listSortingPanelLayout = new javax.swing.GroupLayout(listSortingPanel);
        listSortingPanel.setLayout(listSortingPanelLayout);
        listSortingPanelLayout.setHorizontalGroup(
            listSortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(moveUpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(moveDownButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(moveTopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(listSortingPanelLayout.createSequentialGroup()
                .addComponent(moveBottomButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        listSortingPanelLayout.setVerticalGroup(
            listSortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listSortingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(moveTopButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveUpButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveDownButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveBottomButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addButton.setText("Add");
        addButton.setToolTipText("Add files and directories that should be read");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.setToolTipText("Remove selected lines from the list");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.setToolTipText("Save the current list to memory");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        restoreButton.setText("Restore");
        restoreButton.setToolTipText("Restore the list from memory");
        restoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.setToolTipText("Clear the list");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listModificationPanelLayout = new javax.swing.GroupLayout(listModificationPanel);
        listModificationPanel.setLayout(listModificationPanelLayout);
        listModificationPanelLayout.setHorizontalGroup(
            listModificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listModificationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeButton)
                .addGap(18, 18, 18)
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(restoreButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton)
                .addContainerGap(47, Short.MAX_VALUE))
        );
        listModificationPanelLayout.setVerticalGroup(
            listModificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listModificationPanelLayout.createSequentialGroup()
                .addGroup(listModificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeButton)
                    .addComponent(clearButton)
                    .addComponent(addButton)
                    .addComponent(saveButton)
                    .addComponent(restoreButton))
                .addContainerGap())
        );

        headerReadFilesAndDirectoriesjLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        headerReadFilesAndDirectoriesjLabel.setText("Files and Directories");

        javax.swing.GroupLayout fileInputPanelLayout = new javax.swing.GroupLayout(fileInputPanel);
        fileInputPanel.setLayout(fileInputPanelLayout);
        fileInputPanelLayout.setHorizontalGroup(
            fileInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileInputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerReadFilesAndDirectoriesjLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(fileInputPanelLayout.createSequentialGroup()
                        .addComponent(listSortingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fileInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(listModificationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fileListScrollPane))))
                .addContainerGap())
        );
        fileInputPanelLayout.setVerticalGroup(
            fileInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileInputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerReadFilesAndDirectoriesjLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listSortingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(fileInputPanelLayout.createSequentialGroup()
                        .addComponent(fileListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listModificationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        placeholderForReadFilesAndDirectoriesOptionsLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        placeholderForReadFilesAndDirectoriesOptionsLabel.setText("Traversal Options");

        walkingDepthCheckBox.setText("Go down max.");

        walkingDepthSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        levelsWhenTraversingADirectoryLabel.setText("level(s) when traversing a directory");

        followSymlinksToDirectoriesCheckBox.setSelected(true);
        followSymlinksToDirectoriesCheckBox.setText("Follow symlinks to directories (with file system cycle detection!)");

        followSymlinksToFilesCheckBox.setSelected(true);
        followSymlinksToFilesCheckBox.setText("Follow symlinks to files");

        scanNtfsAdsCheckBox.setText("Find Alternate Data Streams (ADS) at both files and directories (Windows only)");

        javax.swing.GroupLayout fileInputOptionsPanelLayout = new javax.swing.GroupLayout(fileInputOptionsPanel);
        fileInputOptionsPanel.setLayout(fileInputOptionsPanelLayout);
        fileInputOptionsPanelLayout.setHorizontalGroup(
            fileInputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileInputOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileInputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(placeholderForReadFilesAndDirectoriesOptionsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(fileInputOptionsPanelLayout.createSequentialGroup()
                        .addGroup(fileInputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(followSymlinksToFilesCheckBox)
                            .addComponent(followSymlinksToDirectoriesCheckBox)
                            .addComponent(scanNtfsAdsCheckBox)
                            .addGroup(fileInputOptionsPanelLayout.createSequentialGroup()
                                .addComponent(walkingDepthCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(walkingDepthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(levelsWhenTraversingADirectoryLabel)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        fileInputOptionsPanelLayout.setVerticalGroup(
            fileInputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileInputOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(placeholderForReadFilesAndDirectoriesOptionsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fileInputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(walkingDepthCheckBox)
                    .addComponent(levelsWhenTraversingADirectoryLabel)
                    .addComponent(walkingDepthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(followSymlinksToDirectoriesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(followSymlinksToFilesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scanNtfsAdsCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        readingThreadsCheckBox.setText("Read files with");

        readingThreadsSpinner.setModel(new javax.swing.SpinnerNumberModel(2, 2, null, 1));

        parallelThreadsLabel.setText("parallel threads (activate only if all files are stored on SSDs!)");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Read Performance");

        javax.swing.GroupLayout readPerformancePanelLayout = new javax.swing.GroupLayout(readPerformancePanel);
        readPerformancePanel.setLayout(readPerformancePanelLayout);
        readPerformancePanelLayout.setHorizontalGroup(
            readPerformancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(readPerformancePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(readPerformancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(readPerformancePanelLayout.createSequentialGroup()
                        .addComponent(readingThreadsCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(readingThreadsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(parallelThreadsLabel)
                        .addGap(0, 38, Short.MAX_VALUE)))
                .addContainerGap())
        );
        readPerformancePanelLayout.setVerticalGroup(
            readPerformancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(readPerformancePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(readPerformancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readingThreadsCheckBox)
                    .addComponent(readingThreadsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(parallelThreadsLabel))
                .addContainerGap())
        );

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(readPerformancePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileInputOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileInputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileInputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(fileInputOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(readPerformancePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane.addTab("Input", inputPanel);

        headerDataIntegrityStrengthLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        headerDataIntegrityStrengthLabel.setText("Data Integrity Strength");

        algoLabel.setText("Algorithm(s):");

        algoTextField.setEditable(false);
        algoTextField.setToolTipText("Algorithms that will be used, separated by a plus sign");

        selectAlgoButton.setText("Select");
        selectAlgoButton.setToolTipText("Which algorithms do you want to use?");
        selectAlgoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAlgoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout integrityStrengthPanelLayout = new javax.swing.GroupLayout(integrityStrengthPanel);
        integrityStrengthPanel.setLayout(integrityStrengthPanelLayout);
        integrityStrengthPanelLayout.setHorizontalGroup(
            integrityStrengthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(integrityStrengthPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(integrityStrengthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerDataIntegrityStrengthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(integrityStrengthPanelLayout.createSequentialGroup()
                        .addComponent(algoLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(algoTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectAlgoButton)))
                .addContainerGap())
        );
        integrityStrengthPanelLayout.setVerticalGroup(
            integrityStrengthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(integrityStrengthPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerDataIntegrityStrengthLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(integrityStrengthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(algoLabel)
                    .addComponent(algoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectAlgoButton))
                .addContainerGap())
        );

        processingOptionsPanel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        headerDataIntegrityStrengthLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        headerDataIntegrityStrengthLabel1.setText("Compute Performance");

        calculateHashesLabel1.setText("Calculate hashes with");

        hashingThreadsSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        calculateHashesLabel2.setText("parallel threads (if multiple algorithms have been selected)");

        alternativeImplemenationCheckBox.setText("Use alternative implementation(s) if available");

        alternativeImplementationHelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix16x16/question.png"))); // NOI18N
        alternativeImplementationHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alternativeImplementationHelpButtonActionPerformed(evt);
            }
        });

        threadsHashingHelpButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix16x16/question.png"))); // NOI18N
        threadsHashingHelpButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threadsHashingHelpButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout processingOptionsPanelLayout = new javax.swing.GroupLayout(processingOptionsPanel);
        processingOptionsPanel.setLayout(processingOptionsPanelLayout);
        processingOptionsPanelLayout.setHorizontalGroup(
            processingOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processingOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(processingOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerDataIntegrityStrengthLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(processingOptionsPanelLayout.createSequentialGroup()
                        .addComponent(calculateHashesLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hashingThreadsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calculateHashesLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(threadsHashingHelpButton1))
                    .addGroup(processingOptionsPanelLayout.createSequentialGroup()
                        .addComponent(alternativeImplemenationCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alternativeImplementationHelpButton)))
                .addContainerGap())
        );
        processingOptionsPanelLayout.setVerticalGroup(
            processingOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processingOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerDataIntegrityStrengthLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(processingOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(processingOptionsPanelLayout.createSequentialGroup()
                        .addGroup(processingOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(calculateHashesLabel1)
                            .addComponent(hashingThreadsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(calculateHashesLabel2)
                            .addComponent(threadsHashingHelpButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alternativeImplemenationCheckBox))
                    .addComponent(alternativeImplementationHelpButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout calculationPanelLayout = new javax.swing.GroupLayout(calculationPanel);
        calculationPanel.setLayout(calculationPanelLayout);
        calculationPanelLayout.setHorizontalGroup(
            calculationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calculationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(calculationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(processingOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(integrityStrengthPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        calculationPanelLayout.setVerticalGroup(
            calculationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calculationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(integrityStrengthPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(processingOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(284, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Calculation", calculationPanel);

        headerFileIntegrityVerificationLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        headerFileIntegrityVerificationLabel.setText("Integrity Verification File");

        fileVerificationLabel.setText("Verification file:");

        fileVerificationTextField.setToolTipText("Where did you store hashes?");

        fileVerificationSelectFileButton.setText("...");
        fileVerificationSelectFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileVerificationSelectFileButtonActionPerformed(evt);
            }
        });

        fileVerificationClearButton.setText("Clear");
        fileVerificationClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileVerificationClearButtonActionPerformed(evt);
            }
        });

        fileVerificationCharacterSetLabel.setText("Verification file character set:");

        fileVerificationCharacterSetComboBox.setModel(net.jacksum.gui.GUIHelper.buildCharsetsComboBoxModel());
        fileVerificationCharacterSetComboBox.setSelectedItem("UTF-8");

        fileVerificationViewButton.setText("View");
        fileVerificationViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileVerificationViewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout integrityVerificationFilePanelLayout = new javax.swing.GroupLayout(integrityVerificationFilePanel);
        integrityVerificationFilePanel.setLayout(integrityVerificationFilePanelLayout);
        integrityVerificationFilePanelLayout.setHorizontalGroup(
            integrityVerificationFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(integrityVerificationFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(integrityVerificationFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerFileIntegrityVerificationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, integrityVerificationFilePanelLayout.createSequentialGroup()
                        .addGroup(integrityVerificationFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(integrityVerificationFilePanelLayout.createSequentialGroup()
                                .addComponent(fileVerificationCharacterSetLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fileVerificationCharacterSetComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(integrityVerificationFilePanelLayout.createSequentialGroup()
                                .addComponent(fileVerificationLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fileVerificationTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fileVerificationSelectFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(fileVerificationViewButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fileVerificationClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(4, 4, 4)))
                .addContainerGap())
        );
        integrityVerificationFilePanelLayout.setVerticalGroup(
            integrityVerificationFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(integrityVerificationFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerFileIntegrityVerificationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(integrityVerificationFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileVerificationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileVerificationSelectFileButton)
                    .addComponent(fileVerificationLabel)
                    .addComponent(fileVerificationClearButton)
                    .addComponent(fileVerificationViewButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(integrityVerificationFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileVerificationCharacterSetLabel)
                    .addComponent(fileVerificationCharacterSetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Integrity Verification File Format");

        styleLabel1.setText("Style:");

        outputStyleComboBox_verify.setMaximumRowCount(16);
        outputStyleComboBox_verify.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "default", "custom", "bsd", "bsd-r", "sfv", "gnu-linux", "fciv", "openssl-dgst", "openssl-dgst-r", "solaris-digest", "solaris-digest-v" }));
        outputStyleComboBox_verify.setToolTipText("What style/format should be used?");
        outputStyleComboBox_verify.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                outputStyleComboBox_verifyItemStateChanged(evt);
            }
        });

        verificationStyleHelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix16x16/question.png"))); // NOI18N
        verificationStyleHelpButton.setToolTipText("What does that mean?");
        verificationStyleHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verificationStyleHelpButtonActionPerformed(evt);
            }
        });

        hashValueEncodingCheckBox_verify.setText("Hash value encoding:");
        hashValueEncodingCheckBox_verify.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hashValueEncodingCheckBox_verifyItemStateChanged(evt);
            }
        });

        hashValueEncodingComboBox_verify.setMaximumRowCount(16);
        hashValueEncodingComboBox_verify.setModel(net.jacksum.gui.GUIHelper.getEncodingsComboBoxModel());
        hashValueEncodingComboBox_verify.setSelectedItem("hex");

        hashValueEncodingHelpButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix16x16/question.png"))); // NOI18N
        hashValueEncodingHelpButton1.setToolTipText("What does that mean?");
        hashValueEncodingHelpButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hashValueEncodingHelpButton1ActionPerformed(evt);
            }
        });

        includeFileSizeCheckBox_verify.setText("File size in bytes is included");
        includeFileSizeCheckBox_verify.setToolTipText("");
        includeFileSizeCheckBox_verify.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                includeFileSizeCheckBox_verifyItemStateChanged(evt);
            }
        });

        filesizeHelpButton_verifiy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix16x16/question.png"))); // NOI18N
        filesizeHelpButton_verifiy.setToolTipText("What does that mean?");
        filesizeHelpButton_verifiy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filesizeHelpButton_verifiyActionPerformed(evt);
            }
        });

        includeTimestampCheckBox_verify.setText("Timestamp is included, format:");
        includeTimestampCheckBox_verify.setToolTipText("");
        includeTimestampCheckBox_verify.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                includeTimestampCheckBox_verifyItemStateChanged(evt);
            }
        });

        timestampFormatComboBox_verify.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "default", "custom", "unixtime", "unixtime-ms", "iso8601" }));
        timestampFormatComboBox_verify.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                timestampFormatComboBox_verifyItemStateChanged(evt);
            }
        });

        timestampFormatTextField_verify.setText(AppConstants.TIMESTAMP_DEFAULT);

        timestampHelpButton_verify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix16x16/question.png"))); // NOI18N
        timestampHelpButton_verify.setToolTipText("What does that mean?");
        timestampHelpButton_verify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timestampHelpButton_verifyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout integrityVerificationFileFormatPanelLayout = new javax.swing.GroupLayout(integrityVerificationFileFormatPanel);
        integrityVerificationFileFormatPanel.setLayout(integrityVerificationFileFormatPanelLayout);
        integrityVerificationFileFormatPanelLayout.setHorizontalGroup(
            integrityVerificationFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(integrityVerificationFileFormatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(integrityVerificationFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(integrityVerificationFileFormatPanelLayout.createSequentialGroup()
                        .addComponent(styleLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(integrityVerificationFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(integrityVerificationFileFormatPanelLayout.createSequentialGroup()
                                .addComponent(includeTimestampCheckBox_verify)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timestampFormatComboBox_verify, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timestampFormatTextField_verify, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timestampHelpButton_verify))
                            .addGroup(integrityVerificationFileFormatPanelLayout.createSequentialGroup()
                                .addComponent(includeFileSizeCheckBox_verify)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(filesizeHelpButton_verifiy))
                            .addGroup(integrityVerificationFileFormatPanelLayout.createSequentialGroup()
                                .addComponent(hashValueEncodingCheckBox_verify)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hashValueEncodingComboBox_verify, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hashValueEncodingHelpButton1))
                            .addGroup(integrityVerificationFileFormatPanelLayout.createSequentialGroup()
                                .addComponent(outputStyleComboBox_verify, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(verificationStyleHelpButton)))))
                .addContainerGap())
        );
        integrityVerificationFileFormatPanelLayout.setVerticalGroup(
            integrityVerificationFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(integrityVerificationFileFormatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(integrityVerificationFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(integrityVerificationFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(styleLabel1)
                        .addComponent(outputStyleComboBox_verify, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(verificationStyleHelpButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(integrityVerificationFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hashValueEncodingHelpButton1)
                    .addGroup(integrityVerificationFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(hashValueEncodingCheckBox_verify)
                        .addComponent(hashValueEncodingComboBox_verify, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(integrityVerificationFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filesizeHelpButton_verifiy)
                    .addComponent(includeFileSizeCheckBox_verify))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(integrityVerificationFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timestampHelpButton_verify)
                    .addGroup(integrityVerificationFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(includeTimestampCheckBox_verify)
                        .addComponent(timestampFormatComboBox_verify, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(timestampFormatTextField_verify, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        showFilesLabel.setText("Show only files that match status:");

        showOkFilesCheckBox.setSelected(true);
        showOkFilesCheckBox.setText("OK");
        showOkFilesCheckBox.setToolTipText("Files with an expected hash?");

        showFailedFilesCheckBox.setSelected(true);
        showFailedFilesCheckBox.setText("FAILED");
        showFailedFilesCheckBox.setToolTipText("Files with an unexpected hash?");

        showMissingFilesCheckBox.setSelected(true);
        showMissingFilesCheckBox.setText("MISSING");
        showMissingFilesCheckBox.setToolTipText("Files that are not there anymore?");

        showNewFilesCheckBox.setSelected(true);
        showNewFilesCheckBox.setText("NEW");
        showNewFilesCheckBox.setToolTipText("Files that have been added?");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Integrity Verification Filter");

        javax.swing.GroupLayout integrityVerificationFilterPanelLayout = new javax.swing.GroupLayout(integrityVerificationFilterPanel);
        integrityVerificationFilterPanel.setLayout(integrityVerificationFilterPanelLayout);
        integrityVerificationFilterPanelLayout.setHorizontalGroup(
            integrityVerificationFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(integrityVerificationFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(integrityVerificationFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(integrityVerificationFilterPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(showOkFilesCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(showFailedFilesCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(showMissingFilesCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(showNewFilesCheckBox)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(integrityVerificationFilterPanelLayout.createSequentialGroup()
                        .addComponent(showFilesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        integrityVerificationFilterPanelLayout.setVerticalGroup(
            integrityVerificationFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(integrityVerificationFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showFilesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(integrityVerificationFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showOkFilesCheckBox)
                    .addComponent(showFailedFilesCheckBox)
                    .addComponent(showMissingFilesCheckBox)
                    .addComponent(showNewFilesCheckBox)))
        );

        javax.swing.GroupLayout verificationPanelLayout = new javax.swing.GroupLayout(verificationPanel);
        verificationPanel.setLayout(verificationPanelLayout);
        verificationPanelLayout.setHorizontalGroup(
            verificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(verificationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(verificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(integrityVerificationFilePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(integrityVerificationFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(integrityVerificationFileFormatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        verificationPanelLayout.setVerticalGroup(
            verificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(verificationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(integrityVerificationFilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(integrityVerificationFileFormatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(integrityVerificationFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(105, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Verification", verificationPanel);

        printHeaderCheckBox.setText("Print header");
        printHeaderCheckBox.setToolTipText("Prints a short header before the data set");

        outputRespIntegrityInputFormatLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        outputRespIntegrityInputFormatLabel.setText("Header");

        printHeaderHelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix16x16/question.png"))); // NOI18N
        printHeaderHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printHeaderHelpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout outputStyleHeaderPanelLayout = new javax.swing.GroupLayout(outputStyleHeaderPanel);
        outputStyleHeaderPanel.setLayout(outputStyleHeaderPanelLayout);
        outputStyleHeaderPanelLayout.setHorizontalGroup(
            outputStyleHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputStyleHeaderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputStyleHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(outputStyleHeaderPanelLayout.createSequentialGroup()
                        .addComponent(outputRespIntegrityInputFormatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(outputStyleHeaderPanelLayout.createSequentialGroup()
                        .addComponent(printHeaderCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(printHeaderHelpButton))))
        );
        outputStyleHeaderPanelLayout.setVerticalGroup(
            outputStyleHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputStyleHeaderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outputRespIntegrityInputFormatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(outputStyleHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(printHeaderCheckBox)
                    .addComponent(printHeaderHelpButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        styleLabel.setText("Style:");

        outputStyleComboBox.setMaximumRowCount(16);
        outputStyleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "default", "custom", "bsd", "bsd-r", "sfv", "gnu-linux", "fciv", "openssl-dgst", "openssl-dgst-r", "solaris-digest", "solaris-digest-v" }));
        outputStyleComboBox.setToolTipText("What style/format should be used?");
        outputStyleComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                outputStyleComboBoxItemStateChanged(evt);
            }
        });

        hashValueEncodingCheckBox.setText("Hash value encoding:");
        hashValueEncodingCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hashValueEncodingCheckBoxItemStateChanged(evt);
            }
        });

        hashValueEncodingComboBox.setMaximumRowCount(16);
        hashValueEncodingComboBox.setModel(net.jacksum.gui.GUIHelper.getEncodingsComboBoxModel());
        hashValueEncodingComboBox.setSelectedItem("hex");

        includeFileSizeCheckBox.setText("Include file size in bytes");
        includeFileSizeCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                includeFileSizeCheckBoxItemStateChanged(evt);
            }
        });

        includeTimestampCheckBox.setText("Include timestamp, format:");
        includeTimestampCheckBox.setToolTipText("");
        includeTimestampCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                includeTimestampCheckBoxItemStateChanged(evt);
            }
        });

        timestampFormatComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "default", "custom", "unixtime", "unixtime-ms", "iso8601" }));
        timestampFormatComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                timestampFormatComboBoxItemStateChanged(evt);
            }
        });

        timestampFormatTextField.setText(AppConstants.TIMESTAMP_DEFAULT);

        lineFormatCheckBox.setText("Line format:");
        lineFormatCheckBox.setToolTipText("Sets the format of the lines");
        lineFormatCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lineFormatCheckBoxItemStateChanged(evt);
            }
        });

        lineFormatTextField.setText("#ALGONAME{i}(\"#FILENAME\") = #HASH{i,base64-nopadding}");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Line Format");

        lineFormatHelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix16x16/question.png"))); // NOI18N
        lineFormatHelpButton.setToolTipText("What does that mean?");
        lineFormatHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineFormatHelpButtonActionPerformed(evt);
            }
        });

        styleHelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix16x16/question.png"))); // NOI18N
        styleHelpButton.setToolTipText("What does that mean?");
        styleHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                styleHelpButtonActionPerformed(evt);
            }
        });

        hashValueEncodingHelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix16x16/question.png"))); // NOI18N
        hashValueEncodingHelpButton.setToolTipText("What does that mean?");
        hashValueEncodingHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hashValueEncodingHelpButtonActionPerformed(evt);
            }
        });

        timestampHelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix16x16/question.png"))); // NOI18N
        timestampHelpButton.setToolTipText("What does that mean?");
        timestampHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timestampHelpButtonActionPerformed(evt);
            }
        });

        filesizeHelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix16x16/question.png"))); // NOI18N
        filesizeHelpButton.setToolTipText("What does that mean?");
        filesizeHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filesizeHelpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customizedFormatPanelLayout = new javax.swing.GroupLayout(customizedFormatPanel);
        customizedFormatPanel.setLayout(customizedFormatPanelLayout);
        customizedFormatPanelLayout.setHorizontalGroup(
            customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customizedFormatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customizedFormatPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(customizedFormatPanelLayout.createSequentialGroup()
                        .addComponent(styleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, customizedFormatPanelLayout.createSequentialGroup()
                                .addComponent(includeFileSizeCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(filesizeHelpButton))
                            .addGroup(customizedFormatPanelLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(outputStyleComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(styleHelpButton))
                            .addGroup(customizedFormatPanelLayout.createSequentialGroup()
                                .addGroup(customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, customizedFormatPanelLayout.createSequentialGroup()
                                        .addComponent(includeTimestampCheckBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(timestampFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(timestampFormatTextField))
                                    .addGroup(customizedFormatPanelLayout.createSequentialGroup()
                                        .addComponent(hashValueEncodingCheckBox)
                                        .addGap(10, 10, 10)
                                        .addComponent(hashValueEncodingComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, customizedFormatPanelLayout.createSequentialGroup()
                                        .addComponent(lineFormatCheckBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lineFormatTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lineFormatHelpButton)
                                    .addComponent(hashValueEncodingHelpButton)
                                    .addComponent(timestampHelpButton)))))))
        );
        customizedFormatPanelLayout.setVerticalGroup(
            customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customizedFormatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(styleHelpButton)
                    .addGroup(customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(outputStyleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(styleLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lineFormatCheckBox)
                    .addComponent(lineFormatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lineFormatHelpButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hashValueEncodingCheckBox)
                    .addComponent(hashValueEncodingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hashValueEncodingHelpButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(includeFileSizeCheckBox)
                    .addComponent(filesizeHelpButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(includeTimestampCheckBox)
                    .addComponent(timestampFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timestampFormatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timestampHelpButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Path Format");

        pathStyleLabel.setText("Path style:");

        pathStyleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "default", "absolute paths", "relativize paths to", "omit paths" }));
        pathStyleComboBox.setToolTipText("Do you want to adjust paths?");
        pathStyleComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pathStyleComboBoxItemStateChanged(evt);
            }
        });

        pathStyleHelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix16x16/question.png"))); // NOI18N
        pathStyleHelpButton.setToolTipText("What does that mean?");
        pathStyleHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathStyleHelpButtonActionPerformed(evt);
            }
        });

        pathRelativeToTextField.setToolTipText("Drag and Drop is supported");
        pathRelativeToTextField.setDropMode(javax.swing.DropMode.INSERT);
        pathRelativeToTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pathRelativeToTextFieldKeyTyped(evt);
            }
        });

        customizedPathSeparatorCheckBox.setText("Customized path separator:");

        customizedPathSpearatorTextField.setText("/");

        customizedPathSeparatorHelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix16x16/question.png"))); // NOI18N
        customizedPathSeparatorHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customizedPathSeparatorHelpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout outputStylePathFormatPanelLayout = new javax.swing.GroupLayout(outputStylePathFormatPanel);
        outputStylePathFormatPanel.setLayout(outputStylePathFormatPanelLayout);
        outputStylePathFormatPanelLayout.setHorizontalGroup(
            outputStylePathFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputStylePathFormatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputStylePathFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(outputStylePathFormatPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputStylePathFormatPanelLayout.createSequentialGroup()
                        .addComponent(pathStyleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(outputStylePathFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pathStyleComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, outputStylePathFormatPanelLayout.createSequentialGroup()
                                .addComponent(customizedPathSeparatorCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(customizedPathSpearatorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 195, Short.MAX_VALUE))
                            .addComponent(pathRelativeToTextField, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(outputStylePathFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pathStyleHelpButton)
                            .addComponent(customizedPathSeparatorHelpButton)))))
        );
        outputStylePathFormatPanelLayout.setVerticalGroup(
            outputStylePathFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputStylePathFormatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(outputStylePathFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(outputStylePathFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pathStyleLabel)
                        .addComponent(pathStyleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pathStyleHelpButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(outputStylePathFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(outputStylePathFormatPanelLayout.createSequentialGroup()
                        .addComponent(pathRelativeToTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(outputStylePathFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(customizedPathSeparatorCheckBox)
                            .addComponent(customizedPathSpearatorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(customizedPathSeparatorHelpButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout outputStylePanelLayout = new javax.swing.GroupLayout(outputStylePanel);
        outputStylePanel.setLayout(outputStylePanelLayout);
        outputStylePanelLayout.setHorizontalGroup(
            outputStylePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputStylePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputStylePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputStyleHeaderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(customizedFormatPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outputStylePathFormatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        outputStylePanelLayout.setVerticalGroup(
            outputStylePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputStylePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outputStyleHeaderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(customizedFormatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(outputStylePathFormatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Output Style", outputStylePanel);

        headerOutputFilesLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        headerOutputFilesLabel.setText("Output Files");

        standardOutputFileLabel.setText("Standard output:");

        standardOutputFileTextField.setToolTipText("To which file do you want to save the output?\n(drag and drop is supported)");

        standardOutputViewButton.setText("View");
        standardOutputViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standardOutputViewButtonActionPerformed(evt);
            }
        });

        standardErrorFileLabel.setText("Error log:");

        standardErrorFileTextField.setToolTipText("To which file do you want to save errors?\n(drag and drop is supported)");

        standardErrorViewButton.setText("View");
        standardErrorViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standardErrorViewButtonActionPerformed(evt);
            }
        });

        standardOutputFileCharacterSetLabel.setText("Standard output character set:");

        standardOutputFileCharacterSetComboBox.setModel(net.jacksum.gui.GUIHelper.buildCharsetsComboBoxModel());
        standardOutputFileCharacterSetComboBox.setSelectedItem("UTF-8");

        standardErrorFileCharacterSetLabel.setText("Error log character set:");

        standardErrorFileCharacterSetComboBox.setModel(net.jacksum.gui.GUIHelper.buildCharsetsComboBoxModel());
        standardErrorFileCharacterSetComboBox.setSelectedItem("UTF-8");

        javax.swing.GroupLayout outputFilesInnerPanelLayout = new javax.swing.GroupLayout(outputFilesInnerPanel);
        outputFilesInnerPanel.setLayout(outputFilesInnerPanelLayout);
        outputFilesInnerPanelLayout.setHorizontalGroup(
            outputFilesInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputFilesInnerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputFilesInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerOutputFilesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(outputFilesInnerPanelLayout.createSequentialGroup()
                        .addGroup(outputFilesInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(standardOutputFileLabel)
                            .addComponent(standardErrorFileLabel))
                        .addGap(76, 76, 76)
                        .addGroup(outputFilesInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(outputFilesInnerPanelLayout.createSequentialGroup()
                                .addComponent(standardOutputFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(standardOutputViewButton))
                            .addGroup(outputFilesInnerPanelLayout.createSequentialGroup()
                                .addComponent(standardErrorFileTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(standardErrorViewButton))))
                    .addGroup(outputFilesInnerPanelLayout.createSequentialGroup()
                        .addComponent(standardOutputFileCharacterSetLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(standardOutputFileCharacterSetComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(outputFilesInnerPanelLayout.createSequentialGroup()
                        .addComponent(standardErrorFileCharacterSetLabel)
                        .addGap(47, 47, 47)
                        .addComponent(standardErrorFileCharacterSetComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        outputFilesInnerPanelLayout.setVerticalGroup(
            outputFilesInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputFilesInnerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerOutputFilesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(outputFilesInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(standardOutputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(standardOutputFileLabel)
                    .addComponent(standardOutputViewButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(outputFilesInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(standardOutputFileCharacterSetLabel)
                    .addComponent(standardOutputFileCharacterSetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(outputFilesInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(standardErrorFileLabel)
                    .addComponent(standardErrorFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(standardErrorViewButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(outputFilesInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(standardErrorFileCharacterSetLabel)
                    .addComponent(standardErrorFileCharacterSetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        placeholderForOutputFilesOptionsLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        placeholderForOutputFilesOptionsLabel.setText("Advanced Options");

        bomCheckBox.setText("Insert a Byte Order Mark (BOM), even if it is optional for a charset");

        javax.swing.GroupLayout outputFilesOptionsPanelLayout = new javax.swing.GroupLayout(outputFilesOptionsPanel);
        outputFilesOptionsPanel.setLayout(outputFilesOptionsPanelLayout);
        outputFilesOptionsPanelLayout.setHorizontalGroup(
            outputFilesOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputFilesOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputFilesOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(outputFilesOptionsPanelLayout.createSequentialGroup()
                        .addComponent(bomCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(placeholderForOutputFilesOptionsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        outputFilesOptionsPanelLayout.setVerticalGroup(
            outputFilesOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputFilesOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(placeholderForOutputFilesOptionsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bomCheckBox)
                .addContainerGap())
        );

        javax.swing.GroupLayout outputFilesPanelLayout = new javax.swing.GroupLayout(outputFilesPanel);
        outputFilesPanel.setLayout(outputFilesPanelLayout);
        outputFilesPanelLayout.setHorizontalGroup(
            outputFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputFilesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputFilesInnerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outputFilesOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        outputFilesPanelLayout.setVerticalGroup(
            outputFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputFilesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outputFilesInnerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(outputFilesOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane.addTab("Output Files", outputFilesPanel);

        themeLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        themeLabel.setText("Theme");

        darkThemeToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix32x32/toggle-off-32x32.png"))); // NOI18N
        darkThemeToggleButton.setText("Dark Theme");
        darkThemeToggleButton.setToolTipText("Do you prefer dark or light?");
        darkThemeToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                darkThemeToggleButtonItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout themePanelLayout = new javax.swing.GroupLayout(themePanel);
        themePanel.setLayout(themePanelLayout);
        themePanelLayout.setHorizontalGroup(
            themePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(themePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(themePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(themeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(themePanelLayout.createSequentialGroup()
                        .addComponent(darkThemeToggleButton)
                        .addGap(0, 399, Short.MAX_VALUE)))
                .addContainerGap())
        );
        themePanelLayout.setVerticalGroup(
            themePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(themePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(themeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(darkThemeToggleButton)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Window behavior");

        alwaysOnTopCheckBox.setSelected(true);
        alwaysOnTopCheckBox.setText("Window is always on top");
        alwaysOnTopCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                alwaysOnTopCheckBoxItemStateChanged(evt);
            }
        });

        stayOpenCheckBox.setSelected(true);
        stayOpenCheckBox.setText("Stay the window open after a task has been finished");

        centerWindowWhereTheMouseIsCheckBox.setSelected(true);
        centerWindowWhereTheMouseIsCheckBox.setText("After starting, center the window on the screen where the mouse cursor is");

        javax.swing.GroupLayout guiPanelLayout = new javax.swing.GroupLayout(guiPanel);
        guiPanel.setLayout(guiPanelLayout);
        guiPanelLayout.setHorizontalGroup(
            guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stayOpenCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                    .addComponent(alwaysOnTopCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(guiPanelLayout.createSequentialGroup()
                        .addComponent(centerWindowWhereTheMouseIsCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        guiPanelLayout.setVerticalGroup(
            guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(centerWindowWhereTheMouseIsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alwaysOnTopCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stayOpenCheckBox)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout guiOptionsPanelLayout = new javax.swing.GroupLayout(guiOptionsPanel);
        guiOptionsPanel.setLayout(guiOptionsPanelLayout);
        guiOptionsPanelLayout.setHorizontalGroup(
            guiOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guiOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(guiOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(themePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guiPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        guiOptionsPanelLayout.setVerticalGroup(
            guiOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guiOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(themePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(guiPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane.addTab("Frontend", guiOptionsPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(tabbedPane, gridBagConstraints);

        actionButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        actionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix32x32/jacksum-32x32.png"))); // NOI18N
        actionButton.setMnemonic('J');
        actionButton.setText("  Calculate hash values");
        actionButton.setToolTipText("Action!");
        actionButton.setIconTextGap(20);
        actionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout actionPanelLayout = new javax.swing.GroupLayout(actionPanel);
        actionPanel.setLayout(actionPanelLayout);
        actionPanelLayout.setHorizontalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(actionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                .addContainerGap())
        );
        actionPanelLayout.setVerticalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(actionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 11, 0);
        getContentPane().add(actionPanel, gridBagConstraints);

        fileMenu.setText("File");

        preferencesMenuItem.setText("Set Preferences");
        preferencesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferencesMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(preferencesMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        modeMenu.setText("Operating Mode");

        calcMenuItem.setText("Calculate hash values");
        calcMenuItem.setActionCommand("Calculate Hash Values");
        calcMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcMenuItemActionPerformed(evt);
            }
        });
        modeMenu.add(calcMenuItem);

        verifyMenuItem.setText("Verify hash values");
        verifyMenuItem.setActionCommand("Verify Hash Values");
        verifyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyMenuItemActionPerformed(evt);
            }
        });
        modeMenu.add(verifyMenuItem);

        menuBar.add(modeMenu);

        helpMenu.setText("Help");

        homepageHashGartenMenuItem.setText("HashGarten Homepage");
        homepageHashGartenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homepageHashGartenMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(homepageHashGartenMenuItem);

        reportIssueHashGartenMenuItem.setText("Report Issue for HashGarten");
        reportIssueHashGartenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportIssueHashGartenMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(reportIssueHashGartenMenuItem);
        helpMenu.add(jSeparator3);

        manpageJacksumMenuItem.setText("Jacksum Manpage");
        manpageJacksumMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manpageJacksumMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(manpageJacksumMenuItem);

        homepageJacksumMenuItem.setText("Jacksum Homepage");
        homepageJacksumMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homepageJacksumMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(homepageJacksumMenuItem);

        reportIssueJacksumMenuItem.setText("Report Issue for Jacksum");
        reportIssueJacksumMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportIssueJacksumMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(reportIssueJacksumMenuItem);
        helpMenu.add(jSeparator4);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateGUIfromProperties() {
        darkThemeToggleButton.setSelected(props.getProperty(
                PropertyKeys.GUI_THEME,
                PropertyValues.THEME_LIGHT).equals(PropertyValues.THEME_DARK));

        centerWindowWhereTheMouseIsCheckBox.setSelected(props.getProperty(
                PropertyKeys.GUI_SMARTPOSITIONED,
                PropertyValues.TRUE).equals(PropertyValues.TRUE));

        alwaysOnTopCheckBox.setSelected(props.getProperty(
                PropertyKeys.GUI_ALWAYSONTOP,
                PropertyValues.TRUE).equals(PropertyValues.TRUE));
        
        stayOpenCheckBox.setSelected(props.getProperty(
                PropertyKeys.GUI_STAYOPEN,
                PropertyValues.TRUE).equals(PropertyValues.TRUE));
    }

    private void updatePropertiesFromGUI() {
        props.setProperty(PropertyKeys.GUI_THEME, darkThemeToggleButton.isSelected() ? PropertyValues.THEME_DARK : theme.equals(PropertyValues.THEME_SYSTEM) ? theme : PropertyValues.THEME_LIGHT);
        props.setProperty(PropertyKeys.GUI_SMARTPOSITIONED, centerWindowWhereTheMouseIsCheckBox.isSelected() ? PropertyValues.TRUE: PropertyValues.FALSE);
        props.setProperty(PropertyKeys.GUI_ALWAYSONTOP, alwaysOnTopCheckBox.isSelected() ? PropertyValues.TRUE : PropertyValues.FALSE);
        props.setProperty(PropertyKeys.GUI_STAYOPEN, stayOpenCheckBox.isSelected() ? PropertyValues.TRUE: PropertyValues.FALSE);
    }


    // for both the verify panel (verification mode) and the output style panel (calculation mode)
    private void parameters2customStylePanel(
            JCheckBox hashValueEncodingCheckBox, JComboBox hashValueEncodingComboBox,
            JCheckBox includeFileSizeCheckBox, JComboBox outputStyleComboBox,
            JCheckBox includeTimestampCheckBox, JComboBox timestampFormatComboBox, JTextField timestampFormatTextField, JCheckBox lineFormatCheckBox, JTextField lineFormatTextField) {
        
        // Style
        if (parameters.getCompatibilityID() != null) {
            outputStyleComboBox.setSelectedItem(parameters.getCompatibilityID());
        } else {

            // hash value encoding
            if (parameters.getEncoding() != null) {
                hashValueEncodingCheckBox.setSelected(true);
                hashValueEncodingComboBox.setSelectedItem(Encoding.encoding2String(parameters.getEncoding()));
            }

            // include file size
            if (parameters.isFilesizeWantedSet()) {
                includeFileSizeCheckBox.setSelected(parameters.isFilesizeWanted());
            }

            // include timestamp
            if (parameters.isTimestampWanted()) {
                includeTimestampCheckBox.setSelected(true);
                String timestampCode = parameters.getTimestampFormat();
                if (timestampCode.equals("default") || timestampCode.equals("unixtime") || timestampCode.equals("unixtime-ms") || timestampCode.equals("iso8601")) {
                    timestampFormatComboBox.setSelectedItem(timestampCode);
                } else {
                    timestampFormatComboBox.setSelectedItem("custom");
                    timestampFormatTextField.setText(timestampCode);
                }
            }
            timestampFormatTextField.setEnabled(timestampFormatComboBox.getSelectedItem().equals("custom"));

            // line-format (not available in verify mode)
            if (lineFormatCheckBox != null && parameters.getFormat() != null) {
                lineFormatCheckBox.setSelected(true);
                lineFormatTextField.setText(parameters.getFormat());
            }
        }
    }
    
    
    private void customStylePanel2parameters(
            JCheckBox hashValueEncodingCheckBox, JComboBox hashValueEncodingComboBox,
            JCheckBox includeFileSizeCheckBox, JComboBox outputStyleComboBox,
            JCheckBox includeTimestampCheckBox, JComboBox timestampFormatComboBox, JTextField timestampFormatTextField, JCheckBox lineFormatCheckBox, JTextField lineFormatTextField
            
    ) throws UserInputError {
        
        // line-format (not available in verify mode)
        if (lineFormatCheckBox != null) {
            if (lineFormatCheckBox.isSelected()) {
                if (lineFormatTextField.getText().equals("")) {
                    parameters.setFormat(null);
                } else {
                    parameters.setFormat(lineFormatTextField.getText());
                }
            } else {
                parameters.setFormat(null);
            }
        }
        
        // Hash value encoding               
        if (hashValueEncodingCheckBox.isSelected()) {
            parameters.setEncoding(Encoding.string2Encoding(hashValueEncodingComboBox.getSelectedItem().toString()));
        } else {
            parameters.setEncoding((Encoding) null);
        }


        // include file size in bytes
        parameters.unsetFilesizeWanted();
        if (includeFileSizeCheckBox.isSelected() && outputStyleComboBox.getSelectedItem().equals("custom")) {
            parameters.setFilesizeWanted(true);
        }
        if (!includeFileSizeCheckBox.isSelected() && outputStyleComboBox.getSelectedItem().equals("custom")) {
            parameters.setFilesizeWanted(false);
        }


        // include timestamp
        if (includeTimestampCheckBox.isSelected()) {
            if (timestampFormatComboBox.getSelectedItem().equals("custom")) {
                if (!timestampFormatTextField.getText().equals("")) {
                    parameters.setTimestampFormat(timestampFormatTextField.getText());
                } else {                    
                    JOptionPane.showMessageDialog(this, "Timestamp format has been set to custom, but it shall be a non-empty string.");
                    timestampFormatTextField.setText("ENTER SOMETHING HERE, e. g. " + AppConstants.TIMESTAMP_DEFAULT);
                    timestampFormatTextField.selectAll();
                    timestampFormatTextField.requestFocus();
                    throw new UserInputError();
                }
            } else {
                parameters.setTimestampFormat(timestampFormatComboBox.getSelectedItem().toString());
            }
        } else {
            parameters.setTimestampFormat(null);
        }

        // Style
        if (outputStyleComboBox.getSelectedItem().equals("default") || outputStyleComboBox.getSelectedItem().equals("custom")) {
            parameters.setCompatibilityID(null);
        } else {
            parameters.setCompatibilityID(outputStyleComboBox.getSelectedItem().toString());
        }        
    }

    
    
    // INPUT PANEL

    private void parameters2inputPanel() {
        
        // file list
        // happended already at buildFileListModel()

        // walking depth
        walkingDepthCheckBox.setSelected(parameters.isRecursive());
        walkingDepthSpinner.setValue(parameters.isRecursive() ? parameters.getDepth() : 1);

        // follow symlinks to directories
        followSymlinksToDirectoriesCheckBox.setSelected(!parameters.isDontFollowSymlinksToDirectories());

        // follow symlinks to files
        followSymlinksToFilesCheckBox.setSelected(!parameters.isDontFollowSymlinksToFiles());

        // find Alternate Data Streams (ADS)
        scanNtfsAdsCheckBox.setSelected(parameters.isScanNtfsAds());

        // read files with n threads
        readingThreadsSpinner.setModel(new javax.swing.SpinnerNumberModel(ThreadControl.getThreadsMax(), 1, null, 1));
        if (parameters.getThreadsReading() > 1) {
            readingThreadsCheckBox.setSelected(true);
            readingThreadsSpinner.setValue(parameters.getThreadsReading());
        }

    }    
    
    private void inputPanel2parameters() {

        // transform the ListModel to an ArrayList
        List<String> list = new ArrayList<>();
        for (int i = 0; i < fileList.getModel().getSize(); i++) {
            list.add(i, fileList.getModel().getElementAt(i));
        }
        parameters.setFilenamesFromFilelist(list);
        
        // walking depth
        parameters.setRecursive(walkingDepthCheckBox.isSelected());
        if (walkingDepthCheckBox.isSelected()) {
            parameters.setDepth((int) walkingDepthSpinner.getValue());
        }

        // follow symlinks to directories        
        parameters.setDontFollowSymlinksToDirectories(!followSymlinksToDirectoriesCheckBox.isSelected());

        // follow symlinks to files
        parameters.setDontFollowSymlinksToFiles(!followSymlinksToFilesCheckBox.isSelected());
        if (walkingDepthCheckBox.isSelected()) {
            parameters.setDepth(Integer.parseInt((String) walkingDepthSpinner.getValue().toString()));
        }

        // find Alternate Datea Streams
        parameters.setScanNtfsAds(scanNtfsAdsCheckBox.isSelected());
        
        // read files with n threads
        if (readingThreadsCheckBox.isSelected()) {
            parameters.setThreadsReading((int) readingThreadsSpinner.getValue());
        }

    }
    

    // CALCULATION PANEL
    
    private void parameters2calculationPanel() {
        // Algorithm(s)
        // algorithm string can become very long, and we have to restore the original
        // preferred size of the text field component before the long text has been set
        Dimension dimensionBackup = algoTextField.getPreferredSize();
        algoTextField.setText(parameters.getAlgorithm());
        algoTextField.setPreferredSize(dimensionBackup);

        // Calculate hashes with n threads
        hashingThreadsSpinner.setModel(new javax.swing.SpinnerNumberModel(ThreadControl.getThreadsMax(), 1, null, 1));
        if (parameters.getThreadsHashing() > 1) {
            hashingThreadsSpinner.setValue(parameters.getThreadsHashing());
        }

        // Use alternative implemenation if available
        alternativeImplemenationCheckBox.setSelected(parameters.isAlternateImplementationWanted());        
    }
    
    private void calculationPanel2parameters() {
        // Algorithm(s)
        if (algoTextField.getText().length() > 0) {
            parameters.setAlgorithm(algoTextField.getText());
        }

        // Calculate hashes with n threads
        if ((int) hashingThreadsSpinner.getValue() > 1) {
            parameters.setThreadsHashing((int) hashingThreadsSpinner.getValue());
        }

        // Use alternative implemenation if available
        if (alternativeImplemenationCheckBox.isSelected()) {
            parameters.setAlternateImplementationWanted(true);
        }        
    }
    

    // VERIFICATION PANEL
    
    private void parameters2verificationPanel() {
            // check file
            if (parameters.getCheckFile() != null) {
                fileVerificationTextField.setText(parameters.getCheckFile());
            }        
            if (parameters.getCharsetCheckFile() != null) {
                fileVerificationCharacterSetComboBox.setSelectedItem(parameters.getCharsetCheckFile());
            }

            parameters2customStylePanel(
                hashValueEncodingCheckBox_verify, hashValueEncodingComboBox_verify,
                includeFileSizeCheckBox_verify, outputStyleComboBox_verify,
                includeTimestampCheckBox_verify, timestampFormatComboBox_verify, timestampFormatTextField_verify, null, null);
            enableCustomFormatOptions_verify(outputStyleComboBox.getSelectedItem().equals("custom"));
        
            // show file integrity status
            showOkFilesCheckBox.setSelected(parameters.getListFilter().isFilterOk());
            showFailedFilesCheckBox.setSelected(parameters.getListFilter().isFilterFailed());
            showMissingFilesCheckBox.setSelected(parameters.getListFilter().isFilterMissing());
            showNewFilesCheckBox.setSelected(parameters.getListFilter().isFilterNew());

    }


    private void verificationPanel2Parameters() throws UserInputError {
        if (operatingMode == OperatingMode.VERIFY) {

            // check file
            parameters.setCheckFile(fileVerificationTextField.getText());
            parameters.setCharsetCheckFile(fileVerificationCharacterSetComboBox.getSelectedItem().toString());
            
            customStylePanel2parameters(
                hashValueEncodingCheckBox_verify, hashValueEncodingComboBox_verify,
                includeFileSizeCheckBox_verify, outputStyleComboBox_verify,
                includeTimestampCheckBox_verify, timestampFormatComboBox_verify, timestampFormatTextField_verify, null, null);
            
            // show file integrity status
            parameters.getListFilter().setFilterOk(showOkFilesCheckBox.isSelected());
            parameters.getListFilter().setFilterFailed(showFailedFilesCheckBox.isSelected());
            parameters.getListFilter().setFilterMissing(showMissingFilesCheckBox.isSelected());
            parameters.getListFilter().setFilterNew(showNewFilesCheckBox.isSelected());
            
            
            /*
            String pathRelativeTo_verify = pathRelativeToTextField_verify.getText();
            if (!pathRelativeTo_verify.equals("")) {
                parameters.setPathRelativeToAsString(pathRelativeTo_verify);
            } */           

        }
    }

    
    
    // OUTPUT STYLE PANEL
    
    private void parameters2outputStylePanel() {
        // Header
        printHeaderCheckBox.setSelected(parameters.isHeaderWanted());

        // Custom style
        parameters2customStylePanel(
                hashValueEncodingCheckBox, hashValueEncodingComboBox,
                includeFileSizeCheckBox, outputStyleComboBox,
                includeTimestampCheckBox, timestampFormatComboBox, timestampFormatTextField, lineFormatCheckBox, lineFormatTextField);
        enableCustomFormatOptions(outputStyleComboBox.getSelectedItem().equals("custom"));
        
        // Path style
        if (parameters.isNoPath()) {
            pathStyleComboBox.setSelectedItem("omit paths");
        } else if (parameters.isPathAbsolute()) {
            pathStyleComboBox.setSelectedItem("absolute paths");
        } else if (parameters.getPathRelativeTo() != null) {
            pathRelativeToTextField.setText(parameters.getPathRelativeTo().toString());
            pathStyleComboBox.setSelectedItem("relativize paths to");
        } else {
            pathStyleComboBox.setSelectedItem("default");
        }
        pathRelativeToTextField.setVisible(pathStyleComboBox.getSelectedItem().equals("relativize paths to"));
        
        // Customized path char
        if (parameters.isPathCharSet()) {
            customizedPathSeparatorCheckBox.setSelected(true);
            customizedPathSpearatorTextField.setText(parameters.getPathChar().toString());
        } else {
            customizedPathSeparatorCheckBox.setSelected(false);            
            customizedPathSpearatorTextField.setText("/");
        }               

    }
            

    private void outputStylePanel2parameters() throws UserInputError {
        // Header
        parameters.setHeaderWanted(printHeaderCheckBox.isSelected());

        // Custom style
        customStylePanel2parameters(
            hashValueEncodingCheckBox, hashValueEncodingComboBox,
            includeFileSizeCheckBox, outputStyleComboBox,
            includeTimestampCheckBox, timestampFormatComboBox, timestampFormatTextField, lineFormatCheckBox, lineFormatTextField);

        // Path style
        parameters.setPathRelativeToAsString(null);
        parameters.setPathRelativeTo(null);
        parameters.setPathRelativeToEntry(0);
        parameters.setPathAbsolute(false);
        parameters.setNoPath(false);
        parameters.setPathChar(File.separatorChar);        

        if (pathStyleComboBox.getSelectedItem().equals("default")) {
        } else if (pathStyleComboBox.getSelectedItem().equals("omit paths")) {
            parameters.setNoPath(true);
        } else if (pathStyleComboBox.getSelectedItem().equals("absolute paths")) {
            parameters.setPathAbsolute(true);
        } else if (pathStyleComboBox.getSelectedItem().equals("relativize paths to")) {
            String pathRelativeTo = pathRelativeToTextField.getText();
            if (!pathRelativeTo.equals("")) {
                parameters.setPathRelativeToAsString(pathRelativeTo);
            }
        }            
        
        if (customizedPathSeparatorCheckBox.isSelected()) {
            if (customizedPathSpearatorTextField.getText().length() != 1) {
                tabbedPane.setSelectedComponent(outputStylePanel);
                JOptionPane.showMessageDialog(this, "Path separator has ben set to custom, but it shall be a single character.");
                customizedPathSpearatorTextField.selectAll();
                customizedPathSpearatorTextField.requestFocus();
                throw new UserInputError();
            } else {
                parameters.setPathChar(customizedPathSpearatorTextField.getText().charAt(0));
            }
        }
    }
    
    
    
    // OUTPUT FILES PANEL
    
    private void parameters2outputFilesPanel() {
        // Standard output        
        if (parameters.getOutputFile() != null) {
            if (parameters.getOutputFile().equals("relative")) { // special meaning
                updateOutputTextField();
            } else {
                standardOutputFileTextField.setText(parameters.getOutputFile());
            }
        }        
        if (parameters.getCharsetOutputFile() != null) {
            standardOutputFileCharacterSetComboBox.setSelectedItem(parameters.getCharsetOutputFile());
        }

        // Standard error
        if (parameters.getErrorFile() != null) {
            standardErrorFileTextField.setText(parameters.getErrorFile());
        }
        if (parameters.getCharsetErrorFile() != null) {
            standardErrorFileCharacterSetComboBox.setSelectedItem(parameters.getCharsetErrorFile());
        }

        // BOM
        bomCheckBox.setSelected(parameters.isBom());
    }

    private void updateParametersFromOutputFilesPanel() {
        // Standard output
        if (standardOutputFileTextField.getText().equals("")) {
            parameters.setOutputFile(null);
        } else {
            parameters.setOutputFile(standardOutputFileTextField.getText());
            parameters.setCharsetOutputFile(standardOutputFileCharacterSetComboBox.getSelectedItem().toString());
            parameters.setOutputFileOverwrite(true);
        }

        // Standard error
        if (standardErrorFileTextField.getText().equals("")) {
            parameters.setErrorFile(null);
        } else {
            parameters.setErrorFile(standardErrorFileTextField.getText());
            parameters.setCharsetErrorFile(standardErrorFileCharacterSetComboBox.getSelectedItem().toString());
            parameters.setErrorFileOverwrite(true);
        }

        // BOM
        parameters.setBom(bomCheckBox.isSelected());
    }


    private void installDropHandlers() {
        // the Drop-Handler
        DropTransferHandler dropHandler = new DropTransferHandler();
        fileList.setTransferHandler(dropHandler);
        fileVerificationTextField.setTransferHandler(dropHandler);
        pathRelativeToTextField.setTransferHandler(dropHandler);
        standardOutputFileTextField.setTransferHandler(dropHandler);
        standardErrorFileTextField.setTransferHandler(dropHandler);
    }
    
    private void parameters2modeSelection() {
        if (parameters.getCheckFile() == null) {
            fileVerificationTextField.setText("");
            setOperatingMode(OperatingMode.CALC);
        } else {
            setOperatingMode(OperatingMode.VERIFY);
            if (parameters.getCheckFile().equals("relative")) {
                String text = Paths.get(pathRelativeToTextField.getText(), "."+algoTextField.getText().toUpperCase(Locale.US)).toString();
                fileVerificationTextField.setText(text);
            } else {
                fileVerificationTextField.setText(parameters.getCheckFile());
            }
        }        
    }
    
    
    private void updateGUIfromParameters() {
        parameters2inputPanel();
        parameters2calculationPanel();
        parameters2verificationPanel();
        parameters2outputStylePanel();
        parameters2outputFilesPanel();
        // must be the last call in this method, because it adjusts the GUI
        parameters2modeSelection();
    }

    
    private void checkUserInput() throws UserInputError {

        if (operatingMode == OperatingMode.CALC || operatingMode == OperatingMode.VERIFY) {
            if (algoTextField.getText().length() == 0) {               
                tabbedPane.setSelectedComponent(calculationPanel);
                JOptionPane.showMessageDialog(this, "Please select at least one algorithm.");
                throw new UserInputError();
            }
        }

        if (operatingMode == OperatingMode.CALC) {
            // if no file has been given, Jacksum would expect data from stdin, but stdin is not accessible for GUI users,
            // so inform the user to enter files
            if (fileListModel.isEmpty()) {
                tabbedPane.setSelectedComponent(inputPanel);
                JOptionPane.showMessageDialog(this, "You must add at least one file to the file list.\nYou can also drag and drop files to the file list!");
                throw new UserInputError();
            }            
        }
        
        if (operatingMode == OperatingMode.VERIFY) {
            // Verification file name
            if (fileVerificationTextField.getText().equals("")) {
                // JOptionPane: has to be filled out!
                tabbedPane.setSelectedComponent(verificationPanel);
                JOptionPane.showMessageDialog(this, "In verification mode a verification file name is required.");
                fileVerificationTextField.setText("ENTER A VERIFICATION FILE HERE");
                fileVerificationTextField.selectAll();
                fileVerificationTextField.requestFocus();
                throw new UserInputError();
            }
        }
        
    }
    
    private void updateParametersDependentOnMode() {
        if (operatingMode == OperatingMode.CALC) {            
            // calculataion has been selected, so disable the verification mode options that would Jacksum trigger the verification mode            
            parameters.setCheckFile(null);
        }
    }
    
    
    

    private void updateParametersFromGUI() throws UserInputError {

        // invisible settings
        parameters.setHelp(false);

        // check user input
        checkUserInput();
        updateParametersDependentOnMode();
        
        // update parameter object from the user input done on all the panels
        inputPanel2parameters();
        calculationPanel2parameters();
        verificationPanel2Parameters();
        outputStylePanel2parameters();
        updateParametersFromOutputFilesPanel();
    }


    private void actionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionButtonActionPerformed

        try {
            updateParametersFromGUI();
        } catch (UserInputError error) {
            return;
        }
        updatePropertiesFromParameters();
        updatePropertiesFromGUI();

        // mark the parameter object that values have changed by this app to
        // get Jacksum's header (invocation args) correct
        parameters.setParameterModifiedByAPI(true);

        // check all parameters
        try {
            parameters = parameters.checked();

            // transform the ListModel to an ArrayList
            List<String> list = new ArrayList<>();
            for (int i = 0; i < fileList.getModel().getSize(); i++) {
                list.add(i, fileList.getModel().getElementAt(i));
            }
            parameters.setFilenamesFromFilelist(list);

            // adjust the object again, no stdin for the GUI
            parameters.setStdinForFilenamesFromArgs(false);

        } catch (ParameterException | ExitException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            // debug(ex.toString());
            JOptionPane.showMessageDialog(this, ex.getMessage() + "\n" + Arrays.toString(ex.getStackTrace()));
            return;
        }
        saveProperties();

        JOptionPane.showMessageDialog(this, "I will do the work in the background. I will be back when I am done.");
        // we don't need the GUI anymore, we delegate to Jacksum, fingers crossed ...
        setVisible(false);

        try {
            Statistics statistics = new StatisticsElapsedTime();
            // call Jacksum ...
            int exitCode = Actions.getAction(parameters).perform();
            Actions.printStatistics(statistics, parameters);
            // parameters.restoreStdErr();
            // parameters.restoreStdOut();
            
            if (stayOpenCheckBox.isSelected()) {
                tabbedPane.setSelectedComponent(outputFilesPanel);
                setVisible(true);
            }

            JOptionPane.showMessageDialog(this, String.format("HashGarten task has been finished.%n%n"
                    + "Output has been saved to%n%s%n%nError log has been saved to%n%s",
                    parameters.getOutputFile(), parameters.getErrorFile()));

            if (!stayOpenCheckBox.isSelected()) {
                dispose();
                System.exit(0);
            }
        } catch (ExitException | ParameterException ex) {
            // oops, an unexpected error occurred, make the GUI visible again
            setVisible(true);
            JOptionPane.showMessageDialog(this, ex.getMessage() + "\n" + Arrays.toString(ex.getStackTrace()));
            System.err.println(ex);
        }

    }//GEN-LAST:event_actionButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        DefaultListModel<String> model = (DefaultListModel) fileList.getModel();
        model.clear();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void fileVerificationClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileVerificationClearButtonActionPerformed
        fileVerificationTextField.setText("");
    }//GEN-LAST:event_fileVerificationClearButtonActionPerformed

    private void moveTopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveTopButtonActionPerformed
        SwingUtils.moveSelectedJListItemToTop(fileList, fileListModel);
    }//GEN-LAST:event_moveTopButtonActionPerformed

    private void moveBottomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBottomButtonActionPerformed
        SwingUtils.moveSelectedJListItemToBottom(fileList, fileListModel);
    }//GEN-LAST:event_moveBottomButtonActionPerformed

    private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed
        SwingUtils.moveSelectedJListItemUp(fileList, fileListModel);
    }//GEN-LAST:event_moveUpButtonActionPerformed

    private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed
        SwingUtils.moveSelectedJListItemDown(fileList, fileListModel);
    }//GEN-LAST:event_moveDownButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        SwingUtils.removeSelectedJListItem(fileList, fileListModel);
    }//GEN-LAST:event_removeButtonActionPerformed

    private void restoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreButtonActionPerformed
        fileListModel.restore();
    }//GEN-LAST:event_restoreButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        fileListModel.backup();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int state = chooser.showOpenDialog(this);
        File sourceFile = chooser.getSelectedFile();
        if ((sourceFile != null) && (state == JFileChooser.APPROVE_OPTION)) {
            fileListModel.addElement(sourceFile.getPath());
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void fileVerificationSelectFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileVerificationSelectFileButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        if (fileVerificationTextField.getText().trim().length() > 0) {
            chooser.setCurrentDirectory(Paths.get(fileVerificationTextField.getText()).getParent().toFile());
        }
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int state = chooser.showOpenDialog(this);
        File sourceFile = chooser.getSelectedFile();
        if ((sourceFile != null) && (state == JFileChooser.APPROVE_OPTION)) {
            fileVerificationTextField.setText(sourceFile.getPath());
        }

    }//GEN-LAST:event_fileVerificationSelectFileButtonActionPerformed

    private void pathStyleComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pathStyleComboBoxItemStateChanged
        boolean bool = pathStyleComboBox.getSelectedItem().equals("relativize paths to");
        pathRelativeToTextField.setVisible(bool);
        if (!bool) {
            pathRelativeToTextField.setText("");
        }
        this.pack();
    }//GEN-LAST:event_pathStyleComboBoxItemStateChanged

    private void hashValueEncodingCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hashValueEncodingCheckBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            outputStyleComboBox.setSelectedItem("custom");
        }
    }//GEN-LAST:event_hashValueEncodingCheckBoxItemStateChanged

    private void includeFileSizeCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_includeFileSizeCheckBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            outputStyleComboBox.setSelectedItem("custom");
        }
    }//GEN-LAST:event_includeFileSizeCheckBoxItemStateChanged

    private void includeTimestampCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_includeTimestampCheckBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            outputStyleComboBox.setSelectedItem("custom");
        }
    }//GEN-LAST:event_includeTimestampCheckBoxItemStateChanged

    private void outputStyleComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_outputStyleComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            enableCustomFormatOptions(outputStyleComboBox.getSelectedItem().equals("custom"));
            pack();
        }
    }//GEN-LAST:event_outputStyleComboBoxItemStateChanged

    private void enableCustomFormatOptions(boolean bool) {
        hashValueEncodingCheckBox.setVisible(bool);
        hashValueEncodingComboBox.setVisible(bool);
        hashValueEncodingHelpButton.setVisible(bool);
        
        includeFileSizeCheckBox.setVisible(bool);
        filesizeHelpButton.setVisible(bool);
        
        includeTimestampCheckBox.setVisible(bool);
        timestampFormatComboBox.setVisible(bool);
        timestampFormatTextField.setVisible(bool);
        timestampHelpButton.setVisible(bool);
        
        lineFormatCheckBox.setVisible(bool);
        lineFormatTextField.setVisible(bool);
        lineFormatHelpButton.setVisible(bool);        
    }

    private void enableCustomFormatOptions_verify(boolean bool) {
        hashValueEncodingCheckBox_verify.setVisible(bool);
        hashValueEncodingComboBox_verify.setVisible(bool);
        hashValueEncodingHelpButton1.setVisible(bool);
        
        includeFileSizeCheckBox_verify.setVisible(bool);
        filesizeHelpButton_verifiy.setVisible(bool);
        
        includeTimestampCheckBox_verify.setVisible(bool);
        timestampFormatComboBox_verify.setVisible(bool);
        timestampFormatTextField_verify.setVisible(bool);
        timestampHelpButton_verify.setVisible(bool);        
    }


    private void timestampFormatComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_timestampFormatComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            timestampFormatTextField.setVisible(true);
            if (evt.getItem().equals("custom")) {
                timestampFormatTextField.setText(AppConstants.TIMESTAMP_DEFAULT);
                timestampFormatTextField.setEnabled(true);
            } else if (evt.getItem().equals("default")) {
                timestampFormatTextField.setText(AppConstants.TIMESTAMP_DEFAULT);
                timestampFormatTextField.setEnabled(false);
            } else {
                timestampFormatTextField.setText("");
                timestampFormatTextField.setEnabled(false);
            }
        }
    }//GEN-LAST:event_timestampFormatComboBoxItemStateChanged
    
    private void selectAlgoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAlgoButtonActionPerformed
        if (dialog == null) {
            dialog = new AlgorithmSelectorDialog(this, true);
        }
        dialog.setSelection(algoTextField.getText());
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        // TODO if not cancelled
        algoTextField.setText(dialog.getSelection());
        updateOutputTextField();
    }//GEN-LAST:event_selectAlgoButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cancel();
    }//GEN-LAST:event_formWindowClosing

    private void setDarkLookAndFeel(boolean darkWanted) {
        try {
            LookAndFeel lookAndFeel = null;
            if (darkWanted) {
                if (flatDarkLaf == null) {
                    flatDarkLaf = new com.formdev.flatlaf.FlatDarkLaf();
                }
                com.formdev.flatlaf.FlatDarkLaf.setUseNativeWindowDecorations(true);
                lookAndFeel = flatDarkLaf;
            } else {
                if (flatLightLaf == null) {
                    flatLightLaf = new com.formdev.flatlaf.FlatLightLaf();
                }
                com.formdev.flatlaf.FlatLightLaf.setUseNativeWindowDecorations(true);
                lookAndFeel = flatLightLaf;
            }
            javax.swing.UIManager.setLookAndFeel(lookAndFeel);
            com.formdev.flatlaf.FlatLaf.updateUI();
        } catch (UnsupportedLookAndFeelException ex) {
            System.err.println(ex);
        }
    }

    private void pathRelativeToTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pathRelativeToTextFieldKeyTyped
        updateOutputTextField();
    }//GEN-LAST:event_pathRelativeToTextFieldKeyTyped

    private void lineFormatCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lineFormatCheckBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            outputStyleComboBox.setSelectedItem("custom");
        }
    }//GEN-LAST:event_lineFormatCheckBoxItemStateChanged

    private void darkThemeToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_darkThemeToggleButtonItemStateChanged
        GUIHelper.setIconOfToggleButton(darkThemeToggleButton);
        boolean selected = darkThemeToggleButton.isSelected();
        setDarkLookAndFeel(selected);
        props.setProperty(PropertyKeys.GUI_THEME, selected ? PropertyValues.THEME_DARK : PropertyValues.THEME_LIGHT);
    }//GEN-LAST:event_darkThemeToggleButtonItemStateChanged

    
    private static String readTextFile(String filename) throws IOException {
        StringBuilder sb = new StringBuilder();
        try ( FileReader fileReader = new FileReader(new File(filename), Charset.forName("UTF-8"));
                BufferedReader br = new BufferedReader(fileReader)) {
            
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line).append("\n");
            }
        }
        return sb.toString();
    }
    
    private void viewFile(String filename) {
        if (helpDialog == null) {
            helpDialog = new HelpDialog(this, false);
            helpDialog.setLocationRelativeTo(this);
        }
        try {
            String text = readTextFile(filename);
            helpDialog.setTitle(String.format("Viewer: %s", filename));
            helpDialog.setText(text);
            helpDialog.setVisible(true);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error reading file.");
        }
    }
    
    private void help(String text, boolean strict, String title) {
        if (helpDialog == null) {
            helpDialog = new HelpDialog(this, false);
            helpDialog.setLocationRelativeTo(this);
        }
        try {
            helpDialog.searchHelp(text, strict);
            helpDialog.setTitle(title);
            helpDialog.setVisible(true);
        } catch (NothingFoundException ex) {
            JOptionPane.showMessageDialog(this, String.format("Nothing helpful found for %s", text));
            //Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "No help file found.");
            //Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }
    
    private void help(String text, boolean strict) {
        help(text, strict, "Help");
    }
    
    private void help(String text) {
        help(text, false);
    }
    
    private void lineFormatHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineFormatHelpButtonActionPerformed
        help("--format");
    }//GEN-LAST:event_lineFormatHelpButtonActionPerformed

    private void styleHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_styleHelpButtonActionPerformed
        help("--style");
    }//GEN-LAST:event_styleHelpButtonActionPerformed

    private void hashValueEncodingHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hashValueEncodingHelpButtonActionPerformed
        help("--encoding");
    }//GEN-LAST:event_hashValueEncodingHelpButtonActionPerformed

    private void timestampHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timestampHelpButtonActionPerformed
        help("--timestamp");
    }//GEN-LAST:event_timestampHelpButtonActionPerformed

    private void filesizeHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filesizeHelpButtonActionPerformed
        help("--filesize");
    }//GEN-LAST:event_filesizeHelpButtonActionPerformed

    private void pathStyleHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathStyleHelpButtonActionPerformed
        // TODO add your handling code here:
        // help is dependent on the value in path style combobox
        switch (pathStyleComboBox.getSelectedItem().toString()) {
            case "default": help("--path");
                 break;
            case "absolute paths": help("--absolute");
                 break;
            case "relativize paths to": help("--path-relative-to <path>");
                 break;
            case "omit paths": help("--no-path");
                 break;
            default: JOptionPane.showMessageDialog(this, "No suitable help entry found.");
            break;
        }
    }//GEN-LAST:event_pathStyleHelpButtonActionPerformed

    private void alwaysOnTopCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_alwaysOnTopCheckBoxItemStateChanged
        setAlwaysOnTop(alwaysOnTopCheckBox.isSelected());
    }//GEN-LAST:event_alwaysOnTopCheckBoxItemStateChanged

    private void customizedPathSeparatorHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customizedPathSeparatorHelpButtonActionPerformed
        help("--path-separator");
    }//GEN-LAST:event_customizedPathSeparatorHelpButtonActionPerformed

    private void printHeaderHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printHeaderHelpButtonActionPerformed
        help("--header");
    }//GEN-LAST:event_printHeaderHelpButtonActionPerformed

    private void standardOutputViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standardOutputViewButtonActionPerformed
        viewFile(standardOutputFileTextField.getText());
    }//GEN-LAST:event_standardOutputViewButtonActionPerformed

    private void standardErrorViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standardErrorViewButtonActionPerformed
        viewFile(standardErrorFileTextField.getText());
    }//GEN-LAST:event_standardErrorViewButtonActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        cancel();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void calcMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcMenuItemActionPerformed
        setOperatingMode(OperatingMode.CALC);
    }//GEN-LAST:event_calcMenuItemActionPerformed

    private enum OperatingMode { CALC, VERIFY , PREFERENCES}
    private OperatingMode operatingMode = OperatingMode.CALC;
    private void setOperatingMode(OperatingMode mode) {
        this.operatingMode = mode;
        switch (mode) {
            case CALC: setOperatingModeCalc();
                       break;
            case VERIFY: setOperatingModeVerify();
                         break;
            case PREFERENCES: setOperatingModePreferences();
                         break;
        }
        this.pack();
        com.formdev.flatlaf.FlatLaf.updateUI();
    }
    
    
    
    private void setOperatingModeCalc() {
        tabbedPane.removeAll();
        tabbedPane.insertTab(PANEL_NAME_INPUT, null, inputPanel, null, 0);
        tabbedPane.insertTab(PANEL_NAME_CALCULATION, null, calculationPanel, null, 1);
        tabbedPane.insertTab(PANEL_NAME_OUTPUT_STYLE, null, outputStylePanel, null, 2);
        tabbedPane.insertTab(PANEL_NAME_OUTPUT_FILES, null, outputFilesPanel, null, 3);      
        
        customizedFormatPanel.setVisible(true);
        outputStylePathFormatPanel.setVisible(true);

        actionButton.setText(ACTION_BUTTON_CALCULATE_HASHES);
        actionButton.setVisible(true);
    }
    
    private void setOperatingModeVerify() {
        tabbedPane.removeAll();
        tabbedPane.insertTab(PANEL_NAME_INPUT, null, inputPanel, null, 0);
        tabbedPane.insertTab(PANEL_NAME_CALCULATION, null, calculationPanel, null, 1);
        tabbedPane.insertTab(PANEL_NAME_VERIFICATION, null, verificationPanel, null, 2);
        tabbedPane.insertTab(PANEL_NAME_OUTPUT_STYLE, null, outputStylePanel, null, 3);
        tabbedPane.insertTab(PANEL_NAME_OUTPUT_FILES, null, outputFilesPanel, null, 4);

        customizedFormatPanel.setVisible(false);
        outputStylePathFormatPanel.setVisible(false);
        
        actionButton.setText(ACTION_BUTTON_VERIFY_HASHES);
        actionButton.setVisible(true);
    }
    
    private void setOperatingModePreferences() {
        tabbedPane.removeAll();
        tabbedPane.insertTab("GUI", null, guiOptionsPanel, null, 0);
    
        actionButton.setVisible(false);
    }
    
    private void verifyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyMenuItemActionPerformed
        setOperatingMode(OperatingMode.VERIFY);
    }//GEN-LAST:event_verifyMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, String.format("<html><body><h1>HashGarten %s</h1></body></html>\nis powered by Jacksum %s\nhttps://jacksum.net\n\nReleased under the conditions of the GPLv3.\nThis is Free/Libre Open Source Software.", AppConstants.VERSION, JacksumAPI.getVersion()), "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void manpageJacksumMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manpageJacksumMenuItemActionPerformed
        help("", false, "Manpage");        
    }//GEN-LAST:event_manpageJacksumMenuItemActionPerformed

    private void homepageHashGartenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homepageHashGartenMenuItemActionPerformed
        GUIHelper.openWebsite("https://github.com/jonelo/HashGarten");
    }//GEN-LAST:event_homepageHashGartenMenuItemActionPerformed

    private void reportIssueHashGartenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportIssueHashGartenMenuItemActionPerformed
        GUIHelper.openWebsite("https://github.com/jonelo/HashGarten/issues");
    }//GEN-LAST:event_reportIssueHashGartenMenuItemActionPerformed

    private void preferencesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesMenuItemActionPerformed
        setOperatingMode(OperatingMode.PREFERENCES);
    }//GEN-LAST:event_preferencesMenuItemActionPerformed

    private void alternativeImplementationHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alternativeImplementationHelpButtonActionPerformed
        help("-A");
    }//GEN-LAST:event_alternativeImplementationHelpButtonActionPerformed

    private void threadsHashingHelpButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threadsHashingHelpButton1ActionPerformed
        help("--threads-hashing");
    }//GEN-LAST:event_threadsHashingHelpButton1ActionPerformed

    private void homepageJacksumMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homepageJacksumMenuItemActionPerformed
        GUIHelper.openWebsite("https://jacksum.net");
    }//GEN-LAST:event_homepageJacksumMenuItemActionPerformed

    private void reportIssueJacksumMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportIssueJacksumMenuItemActionPerformed
        GUIHelper.openWebsite("https://github.com/jonelo/jacksum/issues");
    }//GEN-LAST:event_reportIssueJacksumMenuItemActionPerformed

    private void outputStyleComboBox_verifyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_outputStyleComboBox_verifyItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            enableCustomFormatOptions_verify(outputStyleComboBox_verify.getSelectedItem().equals("custom"));
            pack();
        }
    }//GEN-LAST:event_outputStyleComboBox_verifyItemStateChanged

    private void verificationStyleHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verificationStyleHelpButtonActionPerformed
        help("--style");
    }//GEN-LAST:event_verificationStyleHelpButtonActionPerformed

    private void hashValueEncodingCheckBox_verifyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hashValueEncodingCheckBox_verifyItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            outputStyleComboBox_verify.setSelectedItem("custom");
        }
    }//GEN-LAST:event_hashValueEncodingCheckBox_verifyItemStateChanged

    private void hashValueEncodingHelpButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hashValueEncodingHelpButton1ActionPerformed
        help("--encoding");
    }//GEN-LAST:event_hashValueEncodingHelpButton1ActionPerformed

    private void includeFileSizeCheckBox_verifyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_includeFileSizeCheckBox_verifyItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            outputStyleComboBox_verify.setSelectedItem("custom");
        }
    }//GEN-LAST:event_includeFileSizeCheckBox_verifyItemStateChanged

    private void filesizeHelpButton_verifiyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filesizeHelpButton_verifiyActionPerformed
        help("--filesize");
    }//GEN-LAST:event_filesizeHelpButton_verifiyActionPerformed

    private void includeTimestampCheckBox_verifyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_includeTimestampCheckBox_verifyItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            outputStyleComboBox_verify.setSelectedItem("custom");
        }
    }//GEN-LAST:event_includeTimestampCheckBox_verifyItemStateChanged

    private void timestampFormatComboBox_verifyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_timestampFormatComboBox_verifyItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            timestampFormatTextField_verify.setVisible(true);
            if (evt.getItem().equals("custom")) {
                timestampFormatTextField_verify.setText(AppConstants.TIMESTAMP_DEFAULT);
                timestampFormatTextField_verify.setEnabled(true);
            } else if (evt.getItem().equals("default")) {
                timestampFormatTextField_verify.setText(AppConstants.TIMESTAMP_DEFAULT);
                timestampFormatTextField_verify.setEnabled(false);
            } else {
                timestampFormatTextField_verify.setText("");
                timestampFormatTextField_verify.setEnabled(false);
            }
        }

    }//GEN-LAST:event_timestampFormatComboBox_verifyItemStateChanged

    private void timestampHelpButton_verifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timestampHelpButton_verifyActionPerformed
        help("--timestamp");
    }//GEN-LAST:event_timestampHelpButton_verifyActionPerformed

    private void fileVerificationViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileVerificationViewButtonActionPerformed
        viewFile(fileVerificationTextField.getText());
    }//GEN-LAST:event_fileVerificationViewButtonActionPerformed

    
    private void updateOutputTextField() {
        String text = Paths.get(pathRelativeToTextField.getText(), "."+algoTextField.getText().toUpperCase(Locale.US).replace(':', '=')).toString();
        standardOutputFileTextField.setText(text);
        props.setProperty(PropertyKeys.GUI_OUTPUT, text);
    }
    

    private void cancel() {
        this.setVisible(false);
        this.dispose();
        System.exit(2);
    }



    private FileListModel buildFileListModel() {
        FileListModel model = new FileListModel();
        model.addAll(parameters.getFilenamesFromFilelist());
        model.addAll(parameters.getFilenamesFromArgs());
        model.backup();
        return model;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton actionButton;
    private javax.swing.JPanel actionPanel;
    private javax.swing.JButton addButton;
    private javax.swing.JLabel algoLabel;
    private javax.swing.JTextField algoTextField;
    private javax.swing.JCheckBox alternativeImplemenationCheckBox;
    private javax.swing.JButton alternativeImplementationHelpButton;
    private javax.swing.JCheckBox alwaysOnTopCheckBox;
    private javax.swing.JCheckBox bomCheckBox;
    private javax.swing.JMenuItem calcMenuItem;
    private javax.swing.JLabel calculateHashesLabel1;
    private javax.swing.JLabel calculateHashesLabel2;
    private javax.swing.JPanel calculationPanel;
    private javax.swing.JCheckBox centerWindowWhereTheMouseIsCheckBox;
    private javax.swing.JButton clearButton;
    private javax.swing.JPanel customizedFormatPanel;
    private javax.swing.JCheckBox customizedPathSeparatorCheckBox;
    private javax.swing.JButton customizedPathSeparatorHelpButton;
    private javax.swing.JTextField customizedPathSpearatorTextField;
    private javax.swing.JToggleButton darkThemeToggleButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JPanel fileInputOptionsPanel;
    private javax.swing.JPanel fileInputPanel;
    private javax.swing.JList<String> fileList;
    private javax.swing.JScrollPane fileListScrollPane;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JComboBox<String> fileVerificationCharacterSetComboBox;
    private javax.swing.JLabel fileVerificationCharacterSetLabel;
    private javax.swing.JButton fileVerificationClearButton;
    private javax.swing.JLabel fileVerificationLabel;
    private javax.swing.JButton fileVerificationSelectFileButton;
    private javax.swing.JTextField fileVerificationTextField;
    private javax.swing.JButton fileVerificationViewButton;
    private javax.swing.JButton filesizeHelpButton;
    private javax.swing.JButton filesizeHelpButton_verifiy;
    private javax.swing.JCheckBox followSymlinksToDirectoriesCheckBox;
    private javax.swing.JCheckBox followSymlinksToFilesCheckBox;
    private javax.swing.JPanel guiOptionsPanel;
    private javax.swing.JPanel guiPanel;
    private javax.swing.JCheckBox hashValueEncodingCheckBox;
    private javax.swing.JCheckBox hashValueEncodingCheckBox_verify;
    private javax.swing.JComboBox<String> hashValueEncodingComboBox;
    private javax.swing.JComboBox<String> hashValueEncodingComboBox_verify;
    private javax.swing.JButton hashValueEncodingHelpButton;
    private javax.swing.JButton hashValueEncodingHelpButton1;
    private javax.swing.JSpinner hashingThreadsSpinner;
    private javax.swing.JLabel headerDataIntegrityStrengthLabel;
    private javax.swing.JLabel headerDataIntegrityStrengthLabel1;
    private javax.swing.JLabel headerFileIntegrityVerificationLabel;
    private javax.swing.JLabel headerOutputFilesLabel;
    private javax.swing.JLabel headerReadFilesAndDirectoriesjLabel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem homepageHashGartenMenuItem;
    private javax.swing.JMenuItem homepageJacksumMenuItem;
    private javax.swing.JCheckBox includeFileSizeCheckBox;
    private javax.swing.JCheckBox includeFileSizeCheckBox_verify;
    private javax.swing.JCheckBox includeTimestampCheckBox;
    private javax.swing.JCheckBox includeTimestampCheckBox_verify;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JPanel integrityStrengthPanel;
    private javax.swing.JPanel integrityVerificationFileFormatPanel;
    private javax.swing.JPanel integrityVerificationFilePanel;
    private javax.swing.JPanel integrityVerificationFilterPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JLabel levelsWhenTraversingADirectoryLabel;
    private javax.swing.JCheckBox lineFormatCheckBox;
    private javax.swing.JButton lineFormatHelpButton;
    private javax.swing.JTextField lineFormatTextField;
    private javax.swing.JPanel listModificationPanel;
    private javax.swing.JPanel listSortingPanel;
    private javax.swing.JMenuItem manpageJacksumMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu modeMenu;
    private javax.swing.JButton moveBottomButton;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JButton moveTopButton;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JPanel outputFilesInnerPanel;
    private javax.swing.JPanel outputFilesOptionsPanel;
    private javax.swing.JPanel outputFilesPanel;
    private javax.swing.JLabel outputRespIntegrityInputFormatLabel;
    private javax.swing.JComboBox<String> outputStyleComboBox;
    private javax.swing.JComboBox<String> outputStyleComboBox_verify;
    private javax.swing.JPanel outputStyleHeaderPanel;
    private javax.swing.JPanel outputStylePanel;
    private javax.swing.JPanel outputStylePathFormatPanel;
    private javax.swing.JLabel parallelThreadsLabel;
    private javax.swing.JTextField pathRelativeToTextField;
    private javax.swing.JComboBox<String> pathStyleComboBox;
    private javax.swing.JButton pathStyleHelpButton;
    private javax.swing.JLabel pathStyleLabel;
    private javax.swing.JLabel placeholderForOutputFilesOptionsLabel;
    private javax.swing.JLabel placeholderForReadFilesAndDirectoriesOptionsLabel;
    private javax.swing.JMenuItem preferencesMenuItem;
    private javax.swing.JCheckBox printHeaderCheckBox;
    private javax.swing.JButton printHeaderHelpButton;
    private javax.swing.JPanel processingOptionsPanel;
    private javax.swing.JPanel readPerformancePanel;
    private javax.swing.JCheckBox readingThreadsCheckBox;
    private javax.swing.JSpinner readingThreadsSpinner;
    private javax.swing.JButton removeButton;
    private javax.swing.JMenuItem reportIssueHashGartenMenuItem;
    private javax.swing.JMenuItem reportIssueJacksumMenuItem;
    private javax.swing.JButton restoreButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox scanNtfsAdsCheckBox;
    private javax.swing.JButton selectAlgoButton;
    private javax.swing.JCheckBox showFailedFilesCheckBox;
    private javax.swing.JLabel showFilesLabel;
    private javax.swing.JCheckBox showMissingFilesCheckBox;
    private javax.swing.JCheckBox showNewFilesCheckBox;
    private javax.swing.JCheckBox showOkFilesCheckBox;
    private javax.swing.JComboBox<String> standardErrorFileCharacterSetComboBox;
    private javax.swing.JLabel standardErrorFileCharacterSetLabel;
    private javax.swing.JLabel standardErrorFileLabel;
    private javax.swing.JTextField standardErrorFileTextField;
    private javax.swing.JButton standardErrorViewButton;
    private javax.swing.JComboBox<String> standardOutputFileCharacterSetComboBox;
    private javax.swing.JLabel standardOutputFileCharacterSetLabel;
    private javax.swing.JLabel standardOutputFileLabel;
    private javax.swing.JTextField standardOutputFileTextField;
    private javax.swing.JButton standardOutputViewButton;
    private javax.swing.JCheckBox stayOpenCheckBox;
    private javax.swing.JButton styleHelpButton;
    private javax.swing.JLabel styleLabel;
    private javax.swing.JLabel styleLabel1;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel themeLabel;
    private javax.swing.JPanel themePanel;
    private javax.swing.JButton threadsHashingHelpButton1;
    private javax.swing.JComboBox<String> timestampFormatComboBox;
    private javax.swing.JComboBox<String> timestampFormatComboBox_verify;
    private javax.swing.JTextField timestampFormatTextField;
    private javax.swing.JTextField timestampFormatTextField_verify;
    private javax.swing.JButton timestampHelpButton;
    private javax.swing.JButton timestampHelpButton_verify;
    private javax.swing.JPanel verificationPanel;
    private javax.swing.JButton verificationStyleHelpButton;
    private javax.swing.JMenuItem verifyMenuItem;
    private javax.swing.JCheckBox walkingDepthCheckBox;
    private javax.swing.JSpinner walkingDepthSpinner;
    // End of variables declaration//GEN-END:variables

}
