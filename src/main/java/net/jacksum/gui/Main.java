/*

  HashGarten 0.9.0 - a GUI to calculate and verify hashes, powered by Jacksum
  Copyright (c) 2022 Dipl.-Inf. (FH) Johann N. Löfflmann,
  All Rights Reserved, <https://jacksum.net>.

  This program is free software: you can redistribute it and/or modify it under
  the terms of the GNU General Public License as published by the Free Software
  Foundation, either version 3 of the License, or (at your option) any later
  version.

  This program is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
  details.

  You should have received a copy of the GNU General Public License along with
  this program. If not, see <https://www.gnu.org/licenses/>.

 */
package net.jacksum.gui;

import java.awt.Dimension;
import net.jacksum.gui.util.SwingUtils;
import net.jacksum.gui.dialogs.AlgorithmSelectorDialog;
import net.jacksum.gui.handlers.DropTransferHandler;
import net.jacksum.gui.interfaces.AlgorithmSelectorDialogInterface;
import net.jacksum.gui.models.FileListModel;
import java.awt.Frame;
import java.awt.event.ItemEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.LookAndFeel;
import javax.swing.UnsupportedLookAndFeelException;

import net.jacksum.*;
import net.jacksum.actions.Actions;
import net.jacksum.cli.CLIParameters;
import net.jacksum.cli.StatisticsElapsedTime;
import net.jacksum.formats.Encoding;
import net.jacksum.gui.util.IO;
import net.jacksum.multicore.ThreadControl;
import net.jacksum.parameters.ParameterException;
import net.jacksum.parameters.Parameters;
import net.jacksum.statistics.Statistics;
import org.n16n.sugar.util.ExitException;

/**
 *
 * @author Johann N. Löfflmann
 */
public class Main extends javax.swing.JFrame implements AlgorithmSelectorDialogInterface {

    private final static String VERSION = "0.9.0";
    private final static String PROPERTIES_FILE = String.format("%s/.HashGarten.properties", System.getProperty("user.home"));
    private final static String TIMESTAMP_DEFAULT = "yyyyMMddHHmmssSSS";

    private final static String PROPERTY_GUI_THEME = "gui.theme";
    private final static String GUI_THEME_DARK = "dark";
    private final static String GUI_THEME_LIGHT = "light";
    private final static String GUI_THEME_SYSTEM = "system";
    private final static String GUI_THEME_NIMBUS = "nimbus";    
    private final static String PROPERTY_GUI_ADVANCED = "gui.advanced";
    private final static String PROPERTY_JACKSUM_PARAMETERS_BASE64 = "jacksum.parameters.base64";

    private String[] args;    
    private Parameters parameters;
    private Properties props;
    private FileListModel fileListModel;
    private AlgorithmSelectorDialog dialog;
    private LookAndFeel flatDarkLaf = null;
    private LookAndFeel flatLightLaf = null;
    private String theme = "light";

    /**
     * Creates the GUI.
     *
     * @param args the program arguments
     */
    public Main(String[] args) {
        super();
        this.args = args;
        initNonGUIcomponents();
        initLookAndFeel();
        initComponents(); // all Swing GUI components, generated by Netbeans
        updateGUIfromParameters();
        updateGUIfromProperties();
        finishLookAndFeel();
        arrangeGUI();
    }
    
    public static void debug(String message) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("hashgarten.log", true))) {
            writer.append(message);
            writer.append("\n");
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
   }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Main(args).setVisible(true);
            }
        });

    }


    // this GUI takes exactly the same parameters as Jacksum
    private void initNonGUIcomponents() {
        readProperties();
        initParameters();
        this.fileListModel = buildFileListModel();        
    }


    @Override
    public Frame getFrame() {
        return this;
    }
    
    
    private void initLookAndFeel() {
        theme = props.getProperty(PROPERTY_GUI_THEME, GUI_THEME_LIGHT);
        switch (theme) {
            case GUI_THEME_SYSTEM: SwingUtils.setSystemLookAndFeel();
                                   break;
            case GUI_THEME_NIMBUS: SwingUtils.setNimbusLookAndFeel();
                                   break;
            default: setDarkLookAndFeel(theme.equals(GUI_THEME_DARK));
                     break;
        }
    }

    
    private void finishLookAndFeel() {
        darkThemeToggleButton.setSelected(theme.equals(GUI_THEME_DARK));        
    }
    
    private void arrangeGUI() {
        this.pack();
        SwingUtils.centerJFrameOnTheDisplayWhereTheMouseIs(this);
    }

    
    // Read properties
    private void readProperties() {
        props = new Properties();
        try (InputStream input = new FileInputStream(PROPERTIES_FILE)) {
            props.load(input);
        } catch (IOException io) {
            System.err.println(io.getMessage());
        }
    }

    // Save some properties
    private void saveProperties() {
        try (OutputStream output = new FileOutputStream(PROPERTIES_FILE)) {
            props.store(output, null);
        } catch (IOException io) {
            System.err.println(io.getMessage());
        }
    }

    
    // Overrule the command line args by the properties stored by the app
    // from an earlier run  
    private void initParameters() {

        // Parameters from Props
        Parameters parametersFromProps = null;
        if (props.getProperty(PROPERTY_JACKSUM_PARAMETERS_BASE64) != null) {
            try {
                parametersFromProps = (Parameters)IO.base64StringToObject(props.getProperty(PROPERTY_JACKSUM_PARAMETERS_BASE64));

                // if we have saved the location to a check file, we need to set
                // it to null, because we want to control verification mode at the GUI by command line args
                // (at the file browser integration)
                parametersFromProps.setCheckFile(null);
                parametersFromProps.getVerbose().setDefault();

                // parametersFromProps.setParameterModifiedByAPI(true);
/*
   debug("parameters from props:\n" + String.join(" ", parametersFromProps.getCLIParametersWithQuotes()));
   debug("algorithm:\n" + parametersFromProps.getAlgorithm());
   debug("algorithmIdentifier:\n" + parametersFromProps.getAlgorithmIdentifier());
*/
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            parametersFromProps = null;
        }

        // Parameters from CLI
        Parameters parametersFromCLI = null;
        try {
            parametersFromCLI = new CLIParameters(args).parse().unchecked();
            // parsed CLIParameters return a parameters object with -h enabled
            // by default, we don't need that here
            parametersFromCLI.setHelp(false);

            // parametersFromCLI.setParameterModifiedByAPI(true);
/*
   debug("parameters from CLI:\n" + String.join(" ", parametersFromCLI.getCLIParametersWithQuotes()));
   debug("algorithm:\n" + parametersFromCLI.getAlgorithm());
   debug("algorithmIdentifier:\n" + parametersFromCLI.getAlgorithmIdentifier());
*/
    
        } catch (ParameterException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
  
        // set the parameter object member depenent to the availability of
        // parameters in the properties file and from the command line
        if (parametersFromProps != null) {
            parametersFromProps.update(parametersFromCLI);
            parameters = parametersFromProps;
        } else {
            parameters = parametersFromCLI;
        }
        // adjust the object again, no stdin for the GUI
        parameters.setStdinForFilenamesFromArgs(false);
        
        try {
            parameters = parameters.checked();
           // parameters.expandFileList();
            // parameters.restoreStdErr();
            // parameters.restoreStdOut();
        } catch (ParameterException| ExitException ex) {
        //} catch (ParameterException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        // parameters.setParameterModifiedByAPI(true);
/*
   debug("parameters checked:\n" + String.join(" ", parameters.getCLIParametersWithQuotes()));
   debug("algorithm:\n" + parameters.getAlgorithm());
   debug("algorithmIdentifier:\n" + parameters.getAlgorithmIdentifier());
*/                  
    }

    // Read values from the parameters object and update the properties object
    private void updatePropertiesFromParameters() {
        try {
            props.setProperty(PROPERTY_JACKSUM_PARAMETERS_BASE64, IO.objectToBase64String(parameters));          
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        processingPanel = new javax.swing.JPanel();
        headerDataIntegrityStrengthLabel = new javax.swing.JLabel();
        algoLabel = new javax.swing.JLabel();
        algoTextField = new javax.swing.JTextField();
        selectAlgoButton = new javax.swing.JButton();
        processingOptionsPanel = new javax.swing.JPanel();
        placeholderForDataIntegrityStrengthOptionsLabel = new javax.swing.JLabel();
        calculateHashesLabel1 = new javax.swing.JLabel();
        hashingThreadsSpinner = new javax.swing.JSpinner();
        calculateHashesLabel2 = new javax.swing.JLabel();
        fileInputPanel = new javax.swing.JPanel();
        fileListScrollPane = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        listSortingPanel = new javax.swing.JPanel();
        moveTopButton = new javax.swing.JButton();
        moveUpButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();
        moveBottomButton = new javax.swing.JButton();
        listModificationPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        restoreButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        headerReadFilesAndDirectoriesjLabel = new javax.swing.JLabel();
        fileInputOptionsPanel = new javax.swing.JPanel();
        placeholderForReadFilesAndDirectoriesOptionsLabel = new javax.swing.JLabel();
        walkingDepthCheckBox = new javax.swing.JCheckBox();
        walkingDepthSpinner = new javax.swing.JSpinner();
        levelsWhenTraversingADirectoryLabel = new javax.swing.JLabel();
        readingThreadsCheckBox = new javax.swing.JCheckBox();
        readingThreadsSpinner = new javax.swing.JSpinner();
        parallelThreadsLabel = new javax.swing.JLabel();
        followSymlinksToDirectoriesCheckBox = new javax.swing.JCheckBox();
        followSymlinksToFilesCheckBox = new javax.swing.JCheckBox();
        scanNtfsAdsCheckBox = new javax.swing.JCheckBox();
        verificationPanel = new javax.swing.JPanel();
        headerFileIntegrityVerificationLabel = new javax.swing.JLabel();
        fileVerificationLabel = new javax.swing.JLabel();
        fileVerificationTextField = new javax.swing.JTextField();
        fileVerificationSelectFileButton = new javax.swing.JButton();
        fileVerificationClearButton = new javax.swing.JButton();
        showFilesLabel = new javax.swing.JLabel();
        showOkFilesCheckBox = new javax.swing.JCheckBox();
        showFailedFilesCheckBox = new javax.swing.JCheckBox();
        showMissingFilesCheckBox = new javax.swing.JCheckBox();
        showNewFilesCheckBox = new javax.swing.JCheckBox();
        verificationOptionsPanel = new javax.swing.JPanel();
        placeholderForFileIntegrityVerificationOptionsLabel = new javax.swing.JLabel();
        fileVerificationCharacterSetLabel = new javax.swing.JLabel();
        fileVerificationCharacterSetComboBox = new javax.swing.JComboBox<>();
        outputFormatPanel = new javax.swing.JPanel();
        outputRespIntegrityInputFormatLabel = new javax.swing.JLabel();
        styleLabel = new javax.swing.JLabel();
        outputStyleComboBox = new javax.swing.JComboBox<>();
        hashValueEncodingCheckBox = new javax.swing.JCheckBox();
        hashValueEncodingComboBox = new javax.swing.JComboBox<>();
        includeFileSizeCheckBox = new javax.swing.JCheckBox();
        includeTimestampCheckBox = new javax.swing.JCheckBox();
        timestampFormatComboBox = new javax.swing.JComboBox<>();
        timestampFormatTextField = new javax.swing.JTextField();
        pathStyleLabel = new javax.swing.JLabel();
        pathStyleComboBox = new javax.swing.JComboBox<>();
        prefixPathsWithLabel = new javax.swing.JLabel();
        pathRelativeToTextField = new javax.swing.JTextField();
        customizedFormatPanel = new javax.swing.JPanel();
        placeholderForCustomFormatOptionsLabel = new javax.swing.JLabel();
        printHeaderCheckBox = new javax.swing.JCheckBox();
        lineFormatCheckBox = new javax.swing.JCheckBox();
        lineFormatTextField = new javax.swing.JTextField();
        outputFilesPanel = new javax.swing.JPanel();
        headerOutputFilesLabel = new javax.swing.JLabel();
        standardOutputFileLabel = new javax.swing.JLabel();
        standardOutputFileTextField = new javax.swing.JTextField();
        standardErrorFileLabel = new javax.swing.JLabel();
        standardErrorFileTextField = new javax.swing.JTextField();
        outputOptionsPanel = new javax.swing.JPanel();
        placeholderForOutputFilesOptionsLabel = new javax.swing.JLabel();
        standardOutputFileCharacterSetLabel = new javax.swing.JLabel();
        standardOutputFileCharacterSetComboBox = new javax.swing.JComboBox<>();
        standardErrorFileCharacterSetLabel = new javax.swing.JLabel();
        standardErrorFileCharacterSetComboBox = new javax.swing.JComboBox<>();
        bomCheckBox = new javax.swing.JCheckBox();
        actionPanel = new javax.swing.JPanel();
        actionButton = new javax.swing.JButton();
        verificationModeToggleButton = new javax.swing.JToggleButton();
        advancedModeToggleButton = new javax.swing.JToggleButton();
        quitButton = new javax.swing.JButton();
        advancedActionPanel = new javax.swing.JPanel();
        darkThemeToggleButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(String.format("HashGarten %s - a GUI powered by Jacksum %s - https://jacksum.net", VERSION, JacksumAPI.getVersion()));
        setAlwaysOnTop(true);
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix32x32/jacksum-32x32.png")).getImage());
        setMinimumSize(new java.awt.Dimension(700, 0));
        setName("HashGarten"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        headerDataIntegrityStrengthLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        headerDataIntegrityStrengthLabel.setText("Data Integrity Strength");

        algoLabel.setText("Algorithms:");

        algoTextField.setEditable(false);
        algoTextField.setToolTipText("Algorithms that will be used, separated by a plus sign");

        selectAlgoButton.setText("Select");
        selectAlgoButton.setToolTipText("Which algorithms do you want to use?");
        selectAlgoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAlgoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout processingPanelLayout = new javax.swing.GroupLayout(processingPanel);
        processingPanel.setLayout(processingPanelLayout);
        processingPanelLayout.setHorizontalGroup(
            processingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(algoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(algoTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectAlgoButton)
                .addContainerGap())
            .addGroup(processingPanelLayout.createSequentialGroup()
                .addComponent(headerDataIntegrityStrengthLabel)
                .addGap(0, 526, Short.MAX_VALUE))
        );
        processingPanelLayout.setVerticalGroup(
            processingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processingPanelLayout.createSequentialGroup()
                .addComponent(headerDataIntegrityStrengthLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(processingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(algoLabel)
                    .addComponent(algoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectAlgoButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 0);
        getContentPane().add(processingPanel, gridBagConstraints);

        placeholderForDataIntegrityStrengthOptionsLabel.setText("   ");

        calculateHashesLabel1.setText("Calculate hashes with");

        hashingThreadsSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        calculateHashesLabel2.setText("parallel threads (if multiple algorithms have been selected)");

        javax.swing.GroupLayout processingOptionsPanelLayout = new javax.swing.GroupLayout(processingOptionsPanel);
        processingOptionsPanel.setLayout(processingOptionsPanelLayout);
        processingOptionsPanelLayout.setHorizontalGroup(
            processingOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processingOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(calculateHashesLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashingThreadsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calculateHashesLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(processingOptionsPanelLayout.createSequentialGroup()
                .addComponent(placeholderForDataIntegrityStrengthOptionsLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        processingOptionsPanelLayout.setVerticalGroup(
            processingOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processingOptionsPanelLayout.createSequentialGroup()
                .addComponent(placeholderForDataIntegrityStrengthOptionsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(processingOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calculateHashesLabel1)
                    .addComponent(hashingThreadsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calculateHashesLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 6, 0, 10);
        getContentPane().add(processingOptionsPanel, gridBagConstraints);

        fileInputPanel.setMaximumSize(new java.awt.Dimension(400, 32767));

        fileList.setModel(fileListModel);
        fileList.setToolTipText("You can drag and drop files and directories here");
        fileList.setDropMode(javax.swing.DropMode.INSERT);
        fileListScrollPane.setViewportView(fileList);

        moveTopButton.setText("Top");
        moveTopButton.setToolTipText("Move selected line to the top of the list");
        moveTopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveTopButtonActionPerformed(evt);
            }
        });

        moveUpButton.setText("Up");
        moveUpButton.setToolTipText("Move selected line up");
        moveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpButtonActionPerformed(evt);
            }
        });

        moveDownButton.setText("Down");
        moveDownButton.setToolTipText("Move selected line down");
        moveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownButtonActionPerformed(evt);
            }
        });

        moveBottomButton.setText("Bottom");
        moveBottomButton.setToolTipText("Move selected line to the bottom of the list");
        moveBottomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBottomButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listSortingPanelLayout = new javax.swing.GroupLayout(listSortingPanel);
        listSortingPanel.setLayout(listSortingPanelLayout);
        listSortingPanelLayout.setHorizontalGroup(
            listSortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(moveUpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(moveDownButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(moveTopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(listSortingPanelLayout.createSequentialGroup()
                .addComponent(moveBottomButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        listSortingPanelLayout.setVerticalGroup(
            listSortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listSortingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(moveTopButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveUpButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveDownButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveBottomButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addButton.setText("Add");
        addButton.setToolTipText("Add files and directories that should be read");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.setToolTipText("Remove selected lines from the list");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.setToolTipText("Save the current list to memory");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        restoreButton.setText("Restore");
        restoreButton.setToolTipText("Restore the list from memory");
        restoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.setToolTipText("Clear the list");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listModificationPanelLayout = new javax.swing.GroupLayout(listModificationPanel);
        listModificationPanel.setLayout(listModificationPanelLayout);
        listModificationPanelLayout.setHorizontalGroup(
            listModificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listModificationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeButton)
                .addGap(18, 18, 18)
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(restoreButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton)
                .addContainerGap(214, Short.MAX_VALUE))
        );
        listModificationPanelLayout.setVerticalGroup(
            listModificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listModificationPanelLayout.createSequentialGroup()
                .addGroup(listModificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeButton)
                    .addComponent(clearButton)
                    .addComponent(addButton)
                    .addComponent(saveButton)
                    .addComponent(restoreButton))
                .addContainerGap())
        );

        headerReadFilesAndDirectoriesjLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        headerReadFilesAndDirectoriesjLabel.setText("Files and Directories");

        javax.swing.GroupLayout fileInputPanelLayout = new javax.swing.GroupLayout(fileInputPanel);
        fileInputPanel.setLayout(fileInputPanelLayout);
        fileInputPanelLayout.setHorizontalGroup(
            fileInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileInputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listSortingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileListScrollPane)
                    .addComponent(listModificationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(fileInputPanelLayout.createSequentialGroup()
                .addComponent(headerReadFilesAndDirectoriesjLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        fileInputPanelLayout.setVerticalGroup(
            fileInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileInputPanelLayout.createSequentialGroup()
                .addComponent(headerReadFilesAndDirectoriesjLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fileInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listSortingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(fileInputPanelLayout.createSequentialGroup()
                        .addComponent(fileListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listModificationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 0);
        getContentPane().add(fileInputPanel, gridBagConstraints);

        placeholderForReadFilesAndDirectoriesOptionsLabel.setText("   ");

        walkingDepthCheckBox.setText("Go down max.");

        walkingDepthSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        levelsWhenTraversingADirectoryLabel.setText("level(s) when traversing a directory");

        readingThreadsCheckBox.setText("Read files with");

        readingThreadsSpinner.setModel(new javax.swing.SpinnerNumberModel(2, 2, null, 1));

        parallelThreadsLabel.setText("parallel threads (activate only if all files are stored on SSDs!)");

        followSymlinksToDirectoriesCheckBox.setSelected(true);
        followSymlinksToDirectoriesCheckBox.setText("Follow symlinks to directories (with file system cycle detection!)");

        followSymlinksToFilesCheckBox.setSelected(true);
        followSymlinksToFilesCheckBox.setText("Follow symlinks to files");

        scanNtfsAdsCheckBox.setText("Find Alternate Data Streams (ADS) at both files and directories (Windows only)");

        javax.swing.GroupLayout fileInputOptionsPanelLayout = new javax.swing.GroupLayout(fileInputOptionsPanel);
        fileInputOptionsPanel.setLayout(fileInputOptionsPanelLayout);
        fileInputOptionsPanelLayout.setHorizontalGroup(
            fileInputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileInputOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileInputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(followSymlinksToFilesCheckBox)
                    .addComponent(followSymlinksToDirectoriesCheckBox)
                    .addComponent(scanNtfsAdsCheckBox)
                    .addGroup(fileInputOptionsPanelLayout.createSequentialGroup()
                        .addComponent(walkingDepthCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(walkingDepthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(levelsWhenTraversingADirectoryLabel))
                    .addGroup(fileInputOptionsPanelLayout.createSequentialGroup()
                        .addComponent(readingThreadsCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(readingThreadsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(parallelThreadsLabel)))
                .addContainerGap(11, Short.MAX_VALUE))
            .addGroup(fileInputOptionsPanelLayout.createSequentialGroup()
                .addComponent(placeholderForReadFilesAndDirectoriesOptionsLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        fileInputOptionsPanelLayout.setVerticalGroup(
            fileInputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fileInputOptionsPanelLayout.createSequentialGroup()
                .addComponent(placeholderForReadFilesAndDirectoriesOptionsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fileInputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(walkingDepthCheckBox)
                    .addComponent(levelsWhenTraversingADirectoryLabel)
                    .addComponent(walkingDepthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileInputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readingThreadsCheckBox)
                    .addComponent(readingThreadsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(parallelThreadsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(followSymlinksToDirectoriesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(followSymlinksToFilesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scanNtfsAdsCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 6, 0, 10);
        getContentPane().add(fileInputOptionsPanel, gridBagConstraints);

        headerFileIntegrityVerificationLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        headerFileIntegrityVerificationLabel.setText("File Integrity Verification");

        fileVerificationLabel.setText("Verification file:");

        fileVerificationTextField.setToolTipText("Where did you store hashes?");

        fileVerificationSelectFileButton.setText("...");
        fileVerificationSelectFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileVerificationSelectFileButtonActionPerformed(evt);
            }
        });

        fileVerificationClearButton.setText("Clear");
        fileVerificationClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileVerificationClearButtonActionPerformed(evt);
            }
        });

        showFilesLabel.setText("Only files that match status:");

        showOkFilesCheckBox.setSelected(true);
        showOkFilesCheckBox.setText("OK");
        showOkFilesCheckBox.setToolTipText("Files with an expected hash?");

        showFailedFilesCheckBox.setSelected(true);
        showFailedFilesCheckBox.setText("FAILED");
        showFailedFilesCheckBox.setToolTipText("Files with an unexpected hash?");

        showMissingFilesCheckBox.setSelected(true);
        showMissingFilesCheckBox.setText("MISSING");
        showMissingFilesCheckBox.setToolTipText("Files that are not there anymore?");

        showNewFilesCheckBox.setSelected(true);
        showNewFilesCheckBox.setText("NEW");
        showNewFilesCheckBox.setToolTipText("Files that have been added?");

        javax.swing.GroupLayout verificationPanelLayout = new javax.swing.GroupLayout(verificationPanel);
        verificationPanel.setLayout(verificationPanelLayout);
        verificationPanelLayout.setHorizontalGroup(
            verificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(verificationPanelLayout.createSequentialGroup()
                .addComponent(headerFileIntegrityVerificationLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(verificationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(verificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(verificationPanelLayout.createSequentialGroup()
                        .addComponent(fileVerificationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileVerificationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileVerificationSelectFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileVerificationClearButton))
                    .addGroup(verificationPanelLayout.createSequentialGroup()
                        .addComponent(showFilesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(showOkFilesCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(showFailedFilesCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(showMissingFilesCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(showNewFilesCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        verificationPanelLayout.setVerticalGroup(
            verificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(verificationPanelLayout.createSequentialGroup()
                .addComponent(headerFileIntegrityVerificationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(verificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileVerificationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileVerificationSelectFileButton)
                    .addComponent(fileVerificationLabel)
                    .addComponent(fileVerificationClearButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(verificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(verificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(showOkFilesCheckBox)
                        .addComponent(showFailedFilesCheckBox)
                        .addComponent(showMissingFilesCheckBox)
                        .addComponent(showNewFilesCheckBox))
                    .addComponent(showFilesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 0);
        getContentPane().add(verificationPanel, gridBagConstraints);

        placeholderForFileIntegrityVerificationOptionsLabel.setText("   ");

        fileVerificationCharacterSetLabel.setText("Verification file character set:");

        fileVerificationCharacterSetComboBox.setModel(buildCharsetsComboBoxModel());
        fileVerificationCharacterSetComboBox.setSelectedItem("UTF-8");

        javax.swing.GroupLayout verificationOptionsPanelLayout = new javax.swing.GroupLayout(verificationOptionsPanel);
        verificationOptionsPanel.setLayout(verificationOptionsPanelLayout);
        verificationOptionsPanelLayout.setHorizontalGroup(
            verificationOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(verificationOptionsPanelLayout.createSequentialGroup()
                .addComponent(placeholderForFileIntegrityVerificationOptionsLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(verificationOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileVerificationCharacterSetLabel)
                .addGap(18, 18, 18)
                .addComponent(fileVerificationCharacterSetComboBox, 0, 298, Short.MAX_VALUE)
                .addContainerGap())
        );
        verificationOptionsPanelLayout.setVerticalGroup(
            verificationOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(verificationOptionsPanelLayout.createSequentialGroup()
                .addComponent(placeholderForFileIntegrityVerificationOptionsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(verificationOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileVerificationCharacterSetLabel)
                    .addComponent(fileVerificationCharacterSetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 6, 0, 10);
        getContentPane().add(verificationOptionsPanel, gridBagConstraints);

        outputRespIntegrityInputFormatLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        outputRespIntegrityInputFormatLabel.setText("Format");

        styleLabel.setText("Style:");

        outputStyleComboBox.setMaximumRowCount(16);
        outputStyleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "default", "custom", "bsd", "fciv", "linux", "sfv", "solaris-tagged", "solaris-untagged", "openssl" }));
        outputStyleComboBox.setToolTipText("What style/format should be used?");
        outputStyleComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                outputStyleComboBoxItemStateChanged(evt);
            }
        });

        hashValueEncodingCheckBox.setText("Hash value encoding:");
        hashValueEncodingCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hashValueEncodingCheckBoxItemStateChanged(evt);
            }
        });

        hashValueEncodingComboBox.setMaximumRowCount(16);
        hashValueEncodingComboBox.setModel(getEncodingsComboBoxModel());
        hashValueEncodingComboBox.setSelectedItem("hex");

        includeFileSizeCheckBox.setText("Include file size in bytes");
        includeFileSizeCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                includeFileSizeCheckBoxItemStateChanged(evt);
            }
        });

        includeTimestampCheckBox.setText("Include timestamp, format:");
        includeTimestampCheckBox.setToolTipText("");
        includeTimestampCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                includeTimestampCheckBoxItemStateChanged(evt);
            }
        });

        timestampFormatComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "default", "custom", "unixtime", "unixtime-ms", "iso8601" }));
        timestampFormatComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                timestampFormatComboBoxItemStateChanged(evt);
            }
        });

        timestampFormatTextField.setText(TIMESTAMP_DEFAULT);

        pathStyleLabel.setText("Path style:");

        pathStyleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "default", "absolute paths", "relativize paths to", "omit paths" }));
        pathStyleComboBox.setToolTipText("Do you want to adjust paths?");
        pathStyleComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pathStyleComboBoxItemStateChanged(evt);
            }
        });

        prefixPathsWithLabel.setText("Paths are relative to:");

        pathRelativeToTextField.setDropMode(javax.swing.DropMode.INSERT);

        javax.swing.GroupLayout outputFormatPanelLayout = new javax.swing.GroupLayout(outputFormatPanel);
        outputFormatPanel.setLayout(outputFormatPanelLayout);
        outputFormatPanelLayout.setHorizontalGroup(
            outputFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputFormatPanelLayout.createSequentialGroup()
                .addGroup(outputFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(outputFormatPanelLayout.createSequentialGroup()
                        .addComponent(outputRespIntegrityInputFormatLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(outputFormatPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(styleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(outputFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, outputFormatPanelLayout.createSequentialGroup()
                                .addComponent(includeTimestampCheckBox)
                                .addGap(2, 2, 2)
                                .addComponent(timestampFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timestampFormatTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE))
                            .addComponent(outputStyleComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(outputFormatPanelLayout.createSequentialGroup()
                                .addComponent(hashValueEncodingCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hashValueEncodingComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, outputFormatPanelLayout.createSequentialGroup()
                                .addComponent(includeFileSizeCheckBox)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(outputFormatPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(outputFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pathStyleLabel)
                            .addComponent(prefixPathsWithLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(outputFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pathRelativeToTextField)
                            .addComponent(pathStyleComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        outputFormatPanelLayout.setVerticalGroup(
            outputFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputFormatPanelLayout.createSequentialGroup()
                .addComponent(outputRespIntegrityInputFormatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(outputFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputStyleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(styleLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(outputFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hashValueEncodingCheckBox)
                    .addComponent(hashValueEncodingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(includeFileSizeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(outputFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(includeTimestampCheckBox)
                    .addComponent(timestampFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timestampFormatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(outputFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathStyleLabel)
                    .addComponent(pathStyleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(outputFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathRelativeToTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prefixPathsWithLabel))
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 0);
        getContentPane().add(outputFormatPanel, gridBagConstraints);

        placeholderForCustomFormatOptionsLabel.setText("   ");

        printHeaderCheckBox.setText("Print header");
        printHeaderCheckBox.setToolTipText("Prints a short header before the data set");

        lineFormatCheckBox.setText("Line format:");
        lineFormatCheckBox.setToolTipText("Sets the format of the lines");
        lineFormatCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lineFormatCheckBoxItemStateChanged(evt);
            }
        });

        lineFormatTextField.setText("#ALGONAME{i}(\"#FILENAME\") = #HASH{i,base64-nopadding}");

        javax.swing.GroupLayout customizedFormatPanelLayout = new javax.swing.GroupLayout(customizedFormatPanel);
        customizedFormatPanel.setLayout(customizedFormatPanelLayout);
        customizedFormatPanelLayout.setHorizontalGroup(
            customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customizedFormatPanelLayout.createSequentialGroup()
                .addComponent(placeholderForCustomFormatOptionsLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(customizedFormatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customizedFormatPanelLayout.createSequentialGroup()
                        .addComponent(printHeaderCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(customizedFormatPanelLayout.createSequentialGroup()
                        .addComponent(lineFormatCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lineFormatTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)))
                .addContainerGap())
        );
        customizedFormatPanelLayout.setVerticalGroup(
            customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customizedFormatPanelLayout.createSequentialGroup()
                .addComponent(placeholderForCustomFormatOptionsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(printHeaderCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customizedFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lineFormatCheckBox)
                    .addComponent(lineFormatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 6, 0, 10);
        getContentPane().add(customizedFormatPanel, gridBagConstraints);

        headerOutputFilesLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        headerOutputFilesLabel.setText("Output Files");

        standardOutputFileLabel.setText("Standard output:");

        standardOutputFileTextField.setToolTipText("To which file do you want to save the output?");

        standardErrorFileLabel.setText("Error log:");

        standardErrorFileTextField.setToolTipText("To which file do you want to save errors?");

        javax.swing.GroupLayout outputFilesPanelLayout = new javax.swing.GroupLayout(outputFilesPanel);
        outputFilesPanel.setLayout(outputFilesPanelLayout);
        outputFilesPanelLayout.setHorizontalGroup(
            outputFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputFilesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(standardOutputFileLabel)
                    .addComponent(standardErrorFileLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(outputFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(standardOutputFileTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                    .addComponent(standardErrorFileTextField))
                .addContainerGap())
            .addGroup(outputFilesPanelLayout.createSequentialGroup()
                .addComponent(headerOutputFilesLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        outputFilesPanelLayout.setVerticalGroup(
            outputFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputFilesPanelLayout.createSequentialGroup()
                .addComponent(headerOutputFilesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(outputFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(standardOutputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(standardOutputFileLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(outputFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(standardErrorFileLabel)
                    .addComponent(standardErrorFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 0);
        getContentPane().add(outputFilesPanel, gridBagConstraints);

        placeholderForOutputFilesOptionsLabel.setText("    ");

        standardOutputFileCharacterSetLabel.setText("Standard output character set:");

        standardOutputFileCharacterSetComboBox.setModel(buildCharsetsComboBoxModel());
        standardOutputFileCharacterSetComboBox.setSelectedItem("UTF-8");

        standardErrorFileCharacterSetLabel.setText("Error log character set:");

        standardErrorFileCharacterSetComboBox.setModel(buildCharsetsComboBoxModel());
        standardErrorFileCharacterSetComboBox.setSelectedItem("UTF-8");

        bomCheckBox.setText("insert a BOM (Byte Order Mark), even if it is optional for a charset");

        javax.swing.GroupLayout outputOptionsPanelLayout = new javax.swing.GroupLayout(outputOptionsPanel);
        outputOptionsPanel.setLayout(outputOptionsPanelLayout);
        outputOptionsPanelLayout.setHorizontalGroup(
            outputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(outputOptionsPanelLayout.createSequentialGroup()
                        .addGroup(outputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(standardOutputFileCharacterSetLabel)
                            .addComponent(standardErrorFileCharacterSetLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(outputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(standardOutputFileCharacterSetComboBox, 0, 297, Short.MAX_VALUE)
                            .addComponent(standardErrorFileCharacterSetComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(bomCheckBox))
                .addContainerGap())
            .addGroup(outputOptionsPanelLayout.createSequentialGroup()
                .addComponent(placeholderForOutputFilesOptionsLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        outputOptionsPanelLayout.setVerticalGroup(
            outputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputOptionsPanelLayout.createSequentialGroup()
                .addComponent(placeholderForOutputFilesOptionsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(outputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(standardOutputFileCharacterSetLabel)
                    .addComponent(standardOutputFileCharacterSetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(outputOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(standardErrorFileCharacterSetLabel)
                    .addComponent(standardErrorFileCharacterSetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bomCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 6, 0, 10);
        getContentPane().add(outputOptionsPanel, gridBagConstraints);

        actionButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        actionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix32x32/jacksum-32x32.png"))); // NOI18N
        actionButton.setMnemonic('J');
        actionButton.setText("  Calculate hash values");
        actionButton.setToolTipText("Action!");
        actionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionButtonActionPerformed(evt);
            }
        });

        verificationModeToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix32x32/toggle-off-32x32.png"))); // NOI18N
        verificationModeToggleButton.setText("Verification mode");
        verificationModeToggleButton.setToolTipText("Do you want to verify data integrity against a precalculated list?");
        verificationModeToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                verificationModeToggleButtonItemStateChanged(evt);
            }
        });

        advancedModeToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix32x32/toggle-off-32x32.png"))); // NOI18N
        advancedModeToggleButton.setText("Advanced");
        advancedModeToggleButton.setToolTipText("Are you an experienced user?");
        advancedModeToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                advancedModeToggleButtonItemStateChanged(evt);
            }
        });

        quitButton.setText("Quit");
        quitButton.setToolTipText("Quits tihs app");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout actionPanelLayout = new javax.swing.GroupLayout(actionPanel);
        actionPanel.setLayout(actionPanelLayout);
        actionPanelLayout.setHorizontalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(actionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(verificationModeToggleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(advancedModeToggleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quitButton)
                .addContainerGap())
        );
        actionPanelLayout.setVerticalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, actionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(verificationModeToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(actionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(advancedModeToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(quitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 11, 0);
        getContentPane().add(actionPanel, gridBagConstraints);

        darkThemeToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix32x32/toggle-off-32x32.png"))); // NOI18N
        darkThemeToggleButton.setText("Dark Theme");
        darkThemeToggleButton.setToolTipText("Do you prefer dark or light?");
        darkThemeToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                darkThemeToggleButtonItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout advancedActionPanelLayout = new javax.swing.GroupLayout(advancedActionPanel);
        advancedActionPanel.setLayout(advancedActionPanelLayout);
        advancedActionPanelLayout.setHorizontalGroup(
            advancedActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advancedActionPanelLayout.createSequentialGroup()
                .addComponent(darkThemeToggleButton)
                .addGap(0, 358, Short.MAX_VALUE))
        );
        advancedActionPanelLayout.setVerticalGroup(
            advancedActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advancedActionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(darkThemeToggleButton)
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 11, 10);
        getContentPane().add(advancedActionPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void updateGUIfromProperties() {
        if (props.getProperty(PROPERTY_GUI_THEME) != null) {
            darkThemeToggleButton.setSelected(props.getProperty(PROPERTY_GUI_THEME, "light").equals("dark"));
        }
        if (props.getProperty(PROPERTY_GUI_ADVANCED) != null) {
            advancedModeToggleButton.setSelected(props.getProperty(PROPERTY_GUI_ADVANCED,"false").equals("true"));
        }
    }
    
    private void updatePropertiesFromGUI() {
        props.setProperty(PROPERTY_GUI_THEME, darkThemeToggleButton.isSelected() ? "dark" : theme.equals("system") ? theme : "light");
        props.setProperty(PROPERTY_GUI_ADVANCED, advancedModeToggleButton.isSelected() ? "true": "false");
    }

    
    private void updateGUIfromParameters() {
        // DATA INTEGRITY STRENGTH

        // algorithm string can become very long, and we have to restore the original
        // preferred size of the text field component before the long text has been set
        Dimension dimensionBackup = algoTextField.getPreferredSize();
        algoTextField.setText(parameters.getAlgorithm());
        algoTextField.setPreferredSize(dimensionBackup);
        
        
        // OPTIONS
        // calculate hashes with x parallel threads
        hashingThreadsSpinner.setModel(new javax.swing.SpinnerNumberModel(ThreadControl.getThreadsMax(), 1, null, 1));
        if (parameters.getThreadsHashing() > 1) {
            hashingThreadsSpinner.setValue(parameters.getThreadsHashing());
        }

        readingThreadsSpinner.setModel(new javax.swing.SpinnerNumberModel(ThreadControl.getThreadsMax(), 1, null, 1));
        if (parameters.getThreadsReading() > 1) {
            readingThreadsSpinner.setValue(parameters.getThreadsReading());
            readingThreadsCheckBox.setSelected(true);
        }
        
        // READ OPTIONS
        // walking depth
        walkingDepthCheckBox.setSelected(parameters.isRecursive());
        walkingDepthSpinner.setValue(parameters.isRecursive() ? parameters.getDepth() : 1);

        // reading threads
        readingThreadsCheckBox.setSelected(parameters.getThreadsReading() > 1);
        if (parameters.getThreadsReading() > 1) {
            readingThreadsSpinner.setValue(parameters.getThreadsReading());
        }

        // follow symlinks to directories
        followSymlinksToDirectoriesCheckBox.setSelected(!parameters.isDontFollowSymlinksToDirectories());

        // follow symlinks to files
        followSymlinksToFilesCheckBox.setSelected(!parameters.isDontFollowSymlinksToFiles());

        // find Alternate Data Streams (ADS)
        scanNtfsAdsCheckBox.setSelected(parameters.isScanNtfsAds());

        // FILE INTEGRITY VERIFICATION
        if (parameters.getCheckFile() == null) {
            fileVerificationTextField.setText("");
            verificationModeToggleButton.setSelected(false);
        } else {
            fileVerificationTextField.setText(parameters.getCheckFile());
            verificationModeToggleButton.setSelected(true);
        }

        // VERIFICATION OPTIONS PANEL
        if (parameters.getCharsetCheckFile() != null) {
            fileVerificationCharacterSetComboBox.setSelectedItem(parameters.getCharsetCheckFile());
        }

        // FORMAT

        // Paths should be relative to something else
        if (parameters.isNoPath()) {
            pathStyleComboBox.setSelectedItem("omit paths");            
        } else
        if (parameters.isPathAbsolute()) {
            pathStyleComboBox.setSelectedItem("absolute paths");
        } else
        if (parameters.getPathRelativeTo() != null) {
            pathRelativeToTextField.setText(parameters.getPathRelativeTo().toString());
            pathStyleComboBox.setSelectedItem("relativize paths to");
        } else {
            pathStyleComboBox.setSelectedItem("default");
        }

        // CUSTOMIZED OUTPUT
        // hash value encoding
        
        // Style
        if (parameters.getCompatibilityID() != null) {
            outputStyleComboBox.setSelectedItem(parameters.getCompatibilityID());
        } else {

            if (parameters.getEncoding() != null) {
                hashValueEncodingCheckBox.setSelected(true);
                hashValueEncodingComboBox.setSelectedItem(parameters.getEncoding().toString());
            }

            // include file size
            if (parameters.isFilesizeWantedSet()) {
                includeFileSizeCheckBox.setSelected(parameters.isFilesizeWanted());
            }

            // include timestamp
            if (parameters.isTimestampWanted()) {
                includeTimestampCheckBox.setSelected(true);
                String timestampCode = parameters.getTimestampFormat();
                if (timestampCode.equals("default") || timestampCode.equals("unixtime") || timestampCode.equals("unixtime-ms") || timestampCode.equals("iso8601")) {
                    timestampFormatComboBox.setSelectedItem(timestampCode);
                } else {
                    timestampFormatComboBox.setSelectedItem("custom");
                    timestampFormatTextField.setText(timestampCode);
                }
            }
            // line-format
            if (parameters.getFormat() != null) {
                lineFormatTextField.setText(parameters.getFormat());
            }
        }
        
        // show file integrity status
        showOkFilesCheckBox.setSelected(parameters.getListFilter().isFilterOk());
        showFailedFilesCheckBox.setSelected(parameters.getListFilter().isFilterFailed());
        showMissingFilesCheckBox.setSelected(parameters.getListFilter().isFilterMissing());
        showNewFilesCheckBox.setSelected(parameters.getListFilter().isFilterNew());

        // header
        printHeaderCheckBox.setSelected(parameters.isHeaderWanted());


        // OUTPUT FILES
        // standard output character set
        if (parameters.getOutputFile() != null) {
            standardOutputFileTextField.setText(parameters.getOutputFile());
        }

        // error log character set
        if (parameters.getErrorFile() != null) {
            standardErrorFileTextField.setText(parameters.getErrorFile());
        }

        // OUTPUT FILE OPTIONS
        // standard output
        if (parameters.getCharsetOutputFile() != null) {
            standardOutputFileCharacterSetComboBox.setSelectedItem(parameters.getCharsetOutputFile());
        }

        // error log
        if (parameters.getCharsetErrorFile() != null) {
            standardErrorFileCharacterSetComboBox.setSelectedItem(parameters.getCharsetErrorFile());
        }

        // bom
        bomCheckBox.setSelected(parameters.isBom());

        // OTHER
        // the Drop-Handler
        DropTransferHandler dropHandler = new DropTransferHandler();
        fileList.setTransferHandler(dropHandler);
        // fileVerificationTextField.setTransferHandler(dropHandler);
        // pathRelativeToTextField.setTransferHandler(dropHandler);

        setAdvancedModeVisibility(advancedModeToggleButton.isSelected());
        setVerificationModeVisibility(verificationModeToggleButton.isSelected());

        pathRelativeToTextField.setVisible(pathStyleComboBox.getSelectedItem().equals("relativize paths to"));
        timestampFormatTextField.setEnabled(timestampFormatComboBox.getSelectedItem().equals("custom"));

        enableCustomFormatOptions(outputStyleComboBox.getSelectedItem().equals("custom"));
    }


    private void updateParametersFromGUI() throws UserInputError {
        //Parameters parameters = parametersFromCLI; // we simply reuse the exising parameter object
        parameters.setHelp(false);

        // DATA INTEGRITY STRENGTH
        // algorithm
        if (algoTextField.getText().length() > 0) {
            parameters.setAlgorithm(algoTextField.getText());
        } else {
            JOptionPane.showMessageDialog(this, "Please select at least one algorithm.");
            throw new UserInputError();
        }

        // read files with n threads
        if ((int) hashingThreadsSpinner.getValue() > 1) {
            parameters.setThreadsHashing((int) hashingThreadsSpinner.getValue());
        }

        // READ FILES AND DIRECTORIES
        // transform the ListModel to an ArrayList
        List<String> list = new ArrayList<>();
        for (int i = 0; i < fileList.getModel().getSize(); i++) {
            list.add(i, fileList.getModel().getElementAt(i));
        }
        parameters.setFilenamesFromFilelist(list);

        // READ OPTIONS
        // go down max. n level(s)
        parameters.setRecursive(walkingDepthCheckBox.isSelected());
        if (walkingDepthCheckBox.isSelected()) {
            parameters.setDepth((int) walkingDepthSpinner.getValue());
        }

        // read files with n threads
        if (readingThreadsCheckBox.isSelected()) {
            parameters.setThreadsReading((int) readingThreadsSpinner.getValue());
        }

        // follow symlinks to directories        
        parameters.setDontFollowSymlinksToDirectories(!followSymlinksToDirectoriesCheckBox.isSelected());

        // follow symlinks to files
        parameters.setDontFollowSymlinksToFiles(!followSymlinksToFilesCheckBox.isSelected());
        if (walkingDepthCheckBox.isSelected()) {
            parameters.setDepth(Integer.parseInt((String) walkingDepthSpinner.getValue().toString()));
        }

        // find Alternate Datea Streams
        parameters.setScanNtfsAds(scanNtfsAdsCheckBox.isSelected());

        // Path style
        parameters.setPathRelativeToAsString(null);
        parameters.setPathRelativeTo(null);
        parameters.setPathRelativeToEntry(0);
        parameters.setPathAbsolute(false);
        parameters.setNoPath(false);

        // FILE INTEGRITY VERIFICATION
        // FILE VERIFICATION PANEL
        if (verificationModeToggleButton.isSelected()) { // verification mode

            // verification file name
            if (fileVerificationTextField.getText().equals("")) {
                // JOptionPane: has to be filled out!
                JOptionPane.showMessageDialog(this, "In verification mode a verification file name is required.");
                fileVerificationTextField.setText("ENTER A VERIFICATION FILE HERE");
                fileVerificationTextField.selectAll();
                fileVerificationTextField.requestFocus();
                throw new UserInputError();
            } else {
                parameters.setCheckFile(fileVerificationTextField.getText());

                // file verification character set
                parameters.setCharsetCheckFile(fileVerificationCharacterSetComboBox.getSelectedItem().toString());

                // show file integrity status
                parameters.getListFilter().setFilterOk(showOkFilesCheckBox.isSelected());
                parameters.getListFilter().setFilterFailed(showFailedFilesCheckBox.isSelected());
                parameters.getListFilter().setFilterMissing(showMissingFilesCheckBox.isSelected());
                parameters.getListFilter().setFilterNew(showNewFilesCheckBox.isSelected());

                String pathRelativeTo = pathRelativeToTextField.getText();
                if (!pathRelativeTo.equals("")) {
                    parameters.setPathRelativeToAsString(pathRelativeTo);
                }
            }

        } else { // calculation mode

            // if no file has been given, Jacksum would expect data from stdin, but stdin is not accessible for GUI users,
            // so inform the user to enter files
            if (fileListModel.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please add at least one file to the file list.\nYou can also drag and drop to the file list!");
                throw new UserInputError();
            } else {

                // calculataion has been selected, so disable the verification mode options that would Jacksum trigger the verification mode            
                parameters.setCheckFile(null);

                // path style            
                if (pathStyleComboBox.getSelectedItem().equals("default")) {
                } else
                if (pathStyleComboBox.getSelectedItem().equals("omit paths")) {
                    parameters.setNoPath(true);
                } else
                if (pathStyleComboBox.getSelectedItem().equals("absolute paths")) {
                    parameters.setPathAbsolute(true);
                } else
                if (pathStyleComboBox.getSelectedItem().equals("relativize paths to")) {
                    String pathRelativeTo = pathRelativeToTextField.getText();
                    if (!pathRelativeTo.equals("")) {
                        parameters.setPathRelativeToAsString(pathRelativeTo);
                    }
                }
            }
        }


        // Custom Style
        // hash value encoding
        if (hashValueEncodingCheckBox.isSelected()) {
            parameters.setEncoding(hashValueEncodingComboBox.getSelectedItem().toString());
        } else {
            parameters.setEncoding((Encoding) null);
        }

        // include file size in bytes
        parameters.unsetFilesizeWanted();
        if (includeFileSizeCheckBox.isSelected() && outputStyleComboBox.getSelectedItem().equals("custom")) {
            parameters.setFilesizeWanted(true);
        }
        if (!includeFileSizeCheckBox.isSelected() && outputStyleComboBox.getSelectedItem().equals("custom")) {
            parameters.setFilesizeWanted(false);
        }

        // include timestamp
        if (includeTimestampCheckBox.isSelected()) {
            if (timestampFormatComboBox.getSelectedItem().equals("custom")) {
                if (!timestampFormatTextField.getText().equals("")) {
                    parameters.setTimestampFormat(timestampFormatTextField.getText());
                } else {
                    JOptionPane.showMessageDialog(this, "Timestamp format has ben set to custom, but it shall be a non-empty string.");
                    fileVerificationTextField.setText("ENTER SOMETHING HERE, e. g. " + TIMESTAMP_DEFAULT);
                    fileVerificationTextField.selectAll();
                    timestampFormatTextField.requestFocus();
                    throw new UserInputError();
                }
            } else {
                parameters.setTimestampFormat(timestampFormatComboBox.getSelectedItem().toString());
            }
        } else {
            parameters.setTimestampFormat(null);
        }

        // line format
        if (lineFormatCheckBox.isSelected()) {
            if (lineFormatTextField.getText().equals("")) {
                parameters.setFormat(null);
            } else {
                parameters.setFormat(lineFormatTextField.getText());
            }
        } else {
            parameters.setFormat(null);
        }

        // header
        parameters.setHeaderWanted(printHeaderCheckBox.isSelected());
        
        // Style
        if (outputStyleComboBox.getSelectedItem().equals("default") || outputStyleComboBox.getSelectedItem().equals("custom")) {
            parameters.setCompatibilityID(null);
        } else {
            parameters.setCompatibilityID(outputStyleComboBox.getSelectedItem().toString());
        }

        
        // customized output is not selected, so reset all those customized output options
        // parameters.setFormat(null);
        // OUTPUT FILES
        if (standardOutputFileTextField.getText().equals("")) {
            parameters.setOutputFile(null);
        } else {
            parameters.setOutputFile(standardOutputFileTextField.getText());
            parameters.setOutputFileOverwrite(true);
        }

        if (standardErrorFileTextField.getText().equals("")) {
            parameters.setErrorFile(null);
        } else {
            parameters.setErrorFile(standardErrorFileTextField.getText());
            parameters.setErrorFileOverwrite(true);
        }

        // OUTPUT FILE OPTIONS
        parameters.setCharsetOutputFile(standardOutputFileCharacterSetComboBox.getSelectedItem().toString());
        parameters.setCharsetErrorFile(standardErrorFileCharacterSetComboBox.getSelectedItem().toString());

        parameters.setBom(bomCheckBox.isSelected());

    }


    private void actionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionButtonActionPerformed

        try {
            updateParametersFromGUI();
        } catch (UserInputError error) {
            return;
        }
        updatePropertiesFromParameters();
        updatePropertiesFromGUI();

        // mark the parameter object that values have changed by this app to
        // get Jacksum's header (invocation args) correct
        parameters.setParameterModifiedByAPI(true);

        
        // check all parameters
        try {
            parameters = parameters.checked();
        } catch (ParameterException | ExitException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            // debug(ex.toString());
            JOptionPane.showMessageDialog(this, ex.getMessage() + "\n" + Arrays.toString(ex.getStackTrace()));
            return;
        }
        saveProperties();

        JOptionPane.showMessageDialog(this, "I will do the work in the background. I will be back when I am done.");
        // we don't need the GUI anymore, we delegate to Jacksum, fingers crossed ...
        setVisible(false);

        
        try {
            Statistics statistics = new StatisticsElapsedTime();
            // call Jacksum ...
            int exitCode = Actions.getAction(parameters).perform();
            Actions.printStatistics(statistics, parameters);
            // parameters.restoreStdErr();
            // parameters.restoreStdOut();

            JOptionPane.showMessageDialog(this, String.format("HashGarten task has been finished.%n%n"+
                    "Output has been saved to%n%s%n%nError log has been saved to%n%s",
                    parameters.getOutputFile(), parameters.getErrorFile()));
            
            dispose();
            System.exit(0);
        } catch (ExitException | ParameterException ex) {
            // oops, an unexpected error occurred, make the GUI visible again
            setVisible(true);
            JOptionPane.showMessageDialog(this, ex.getMessage() + "\n" + Arrays.toString(ex.getStackTrace()));
            System.err.println(ex);
        }

    }//GEN-LAST:event_actionButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        cancel();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void setAdvancedModeVisibility(boolean bool) {
        fileInputOptionsPanel.setVisible(bool);
        listSortingPanel.setVisible(bool);
        verificationOptionsPanel.setVisible(verificationModeToggleButton.isSelected() ? bool : false);
        customizedFormatPanel.setVisible(bool);
        outputOptionsPanel.setVisible(bool);
        advancedActionPanel.setVisible(bool);
        processingOptionsPanel.setVisible(bool);

    }

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        DefaultListModel<String> model = (DefaultListModel) fileList.getModel();
        model.clear();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void fileVerificationClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileVerificationClearButtonActionPerformed
        fileVerificationTextField.setText("");
    }//GEN-LAST:event_fileVerificationClearButtonActionPerformed

    private void moveTopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveTopButtonActionPerformed
        SwingUtils.moveSelectedJListItemToTop(fileList, fileListModel);
    }//GEN-LAST:event_moveTopButtonActionPerformed

    private void moveBottomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBottomButtonActionPerformed
        SwingUtils.moveSelectedJListItemToBottom(fileList, fileListModel);
    }//GEN-LAST:event_moveBottomButtonActionPerformed

    private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed
        SwingUtils.moveSelectedJListItemUp(fileList, fileListModel);
    }//GEN-LAST:event_moveUpButtonActionPerformed

    private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed
        SwingUtils.moveSelectedJListItemDown(fileList, fileListModel);
    }//GEN-LAST:event_moveDownButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        SwingUtils.removeSelectedJListItem(fileList, fileListModel);
    }//GEN-LAST:event_removeButtonActionPerformed

    private void restoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreButtonActionPerformed
        fileListModel.restore();
    }//GEN-LAST:event_restoreButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        fileListModel.backup();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int state = chooser.showOpenDialog(this);
        File sourceFile = chooser.getSelectedFile();
        if ((sourceFile != null) && (state == JFileChooser.APPROVE_OPTION)) {
            fileListModel.addElement(sourceFile.getPath());
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void fileVerificationSelectFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileVerificationSelectFileButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int state = chooser.showOpenDialog(this);
        File sourceFile = chooser.getSelectedFile();
        if ((sourceFile != null) && (state == JFileChooser.APPROVE_OPTION)) {
            fileVerificationTextField.setText(sourceFile.getPath());
        }

    }//GEN-LAST:event_fileVerificationSelectFileButtonActionPerformed

    private void pathStyleComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pathStyleComboBoxItemStateChanged
        pathRelativeToTextField.setVisible(pathStyleComboBox.getSelectedItem().equals("relativize paths to"));
        this.pack();
    }//GEN-LAST:event_pathStyleComboBoxItemStateChanged

    private void hashValueEncodingCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hashValueEncodingCheckBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            outputStyleComboBox.setSelectedItem("custom");
        }
    }//GEN-LAST:event_hashValueEncodingCheckBoxItemStateChanged

    private void includeFileSizeCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_includeFileSizeCheckBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            outputStyleComboBox.setSelectedItem("custom");
        }
    }//GEN-LAST:event_includeFileSizeCheckBoxItemStateChanged

    private void includeTimestampCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_includeTimestampCheckBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            outputStyleComboBox.setSelectedItem("custom");
        }
    }//GEN-LAST:event_includeTimestampCheckBoxItemStateChanged

    private void lineFormatCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lineFormatCheckBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            outputStyleComboBox.setSelectedItem("custom");
        }
    }//GEN-LAST:event_lineFormatCheckBoxItemStateChanged

    private void setAdvancedMode(boolean b) {
        setAdvancedModeVisibility(b);
        setIconOfToggleButton(advancedModeToggleButton);
        this.pack();
        SwingUtils.centerJFrameOnTheDisplayWhereTheMouseIs(this);
    }

    private void outputStyleComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_outputStyleComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (outputStyleComboBox.getSelectedItem().equals("custom")) {
                //setAdvancedMode(true);
                enableCustomFormatOptions(true);

            } else {
                hashValueEncodingCheckBox.setSelected(false);
                includeFileSizeCheckBox.setSelected(false);
                includeTimestampCheckBox.setSelected(false);
                lineFormatCheckBox.setSelected(false);

                enableCustomFormatOptions(false);
            }
            pack();
        }
    }//GEN-LAST:event_outputStyleComboBoxItemStateChanged

    private void enableCustomFormatOptions(boolean bool) {
        hashValueEncodingCheckBox.setVisible(bool);
        hashValueEncodingComboBox.setVisible(bool);
        includeFileSizeCheckBox.setVisible(bool);
        includeTimestampCheckBox.setVisible(bool);
        lineFormatCheckBox.setVisible(bool);
        timestampFormatComboBox.setVisible(bool);
        //timestampFormatTextField.setEnabled(bool && timestampFormatComboBox.getSelectedItem().equals("custom"));
        timestampFormatTextField.setVisible(bool);
        lineFormatTextField.setVisible(bool);
    }


    private void timestampFormatComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_timestampFormatComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            timestampFormatTextField.setVisible(true);
            if (evt.getItem().equals("custom")) {
                timestampFormatTextField.setText(TIMESTAMP_DEFAULT);
                timestampFormatTextField.setEnabled(true);
            } else if (evt.getItem().equals("default")) {
                timestampFormatTextField.setText(TIMESTAMP_DEFAULT);
                timestampFormatTextField.setEnabled(false);
            } else {
                timestampFormatTextField.setText("");
                timestampFormatTextField.setEnabled(false);
            }
        }
    }//GEN-LAST:event_timestampFormatComboBoxItemStateChanged

    private void verificationModeToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_verificationModeToggleButtonItemStateChanged
        setVerificationModeVisibility(verificationModeToggleButton.isSelected());

        if (verificationModeToggleButton.isSelected()) {
            actionButton.setText("  Verify hash values");
        } else {
            actionButton.setText("  Calculate hash values");
        }

        setIconOfToggleButton(verificationModeToggleButton);
        this.pack();
    }//GEN-LAST:event_verificationModeToggleButtonItemStateChanged

    private void advancedModeToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_advancedModeToggleButtonItemStateChanged
        setAdvancedMode(advancedModeToggleButton.isSelected());
    }//GEN-LAST:event_advancedModeToggleButtonItemStateChanged

    private void selectAlgoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAlgoButtonActionPerformed
        if (dialog == null) {
            dialog = new AlgorithmSelectorDialog(this, true);
        }
        dialog.setSelection(algoTextField.getText());
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        // TODO if not cancelled
        algoTextField.setText(dialog.getSelection());
    }//GEN-LAST:event_selectAlgoButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cancel();
    }//GEN-LAST:event_formWindowClosing

    private void setDarkLookAndFeel(boolean darkWanted) {
        try {

            LookAndFeel lookAndFeel = null;
            if (darkWanted) {
                if (flatDarkLaf == null) {
                    flatDarkLaf = new com.formdev.flatlaf.FlatDarkLaf();
                }
                com.formdev.flatlaf.FlatDarkLaf.setUseNativeWindowDecorations(true);
                lookAndFeel = flatDarkLaf;
            } else {
                if (flatLightLaf == null) {
                    flatLightLaf = new com.formdev.flatlaf.FlatLightLaf();
                }
                com.formdev.flatlaf.FlatLightLaf.setUseNativeWindowDecorations(true);
                lookAndFeel = flatLightLaf;
            }
            javax.swing.UIManager.setLookAndFeel(lookAndFeel);
            com.formdev.flatlaf.FlatLaf.updateUI();
        } catch (UnsupportedLookAndFeelException ex) {
            System.err.println(ex);
        }
    }

    private void darkThemeToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_darkThemeToggleButtonItemStateChanged
        setIconOfToggleButton(darkThemeToggleButton);
        boolean selected = darkThemeToggleButton.isSelected();
        setDarkLookAndFeel(selected);
        props.setProperty(PROPERTY_GUI_THEME, selected ? GUI_THEME_DARK : GUI_THEME_LIGHT);
    }//GEN-LAST:event_darkThemeToggleButtonItemStateChanged

    private void setVerificationModeVisibility(boolean bool) {
        verificationPanel.setVisible(bool);
        verificationOptionsPanel.setVisible(advancedModeToggleButton.isSelected() ? bool : false);
        prefixPathsWithLabel.setText(bool ? "Paths are relative to" : "");
        pathRelativeToTextField.setVisible(bool ? true : pathStyleComboBox.getSelectedItem().equals("relativize paths to"));
        pathStyleLabel.setVisible(!bool);
        pathStyleComboBox.setVisible(!bool);
        showFilesLabel.setVisible(bool);
        showOkFilesCheckBox.setVisible(bool);
        showFailedFilesCheckBox.setVisible(bool);
        showMissingFilesCheckBox.setVisible(bool);
        showNewFilesCheckBox.setVisible(bool);
    }

    private void setIconOfToggleButton(JToggleButton toggleButton) {
        toggleButton.setIcon(toggleButton.isSelected()
                ? new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix32x32/toggle-on-32x32.png"))
                : new javax.swing.ImageIcon(getClass().getResource("/net/jacksum/gui/pix32x32/toggle-off-32x32.png")));
    }

    private void cancel() {
        this.setVisible(false);
        this.dispose();
        System.exit(2);
    }

    private DefaultComboBoxModel getAlgorithmsComboBoxModel() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Map<String, String> map = JacksumAPI.getAvailableAlgorithms();
        for (Map.Entry<String, String> entry : map.entrySet()) {
            String key = entry.getKey();
            model.addElement(key);
        }
        // workaround for bug in Jacksum 3.3.0
        // sm3 not returned
        if (!map.containsKey("sm3")) {
            model.addElement("sm3");
        }
        return model;
    }

    private DefaultComboBoxModel buildCharsetsComboBoxModel() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();

        Map<String, Charset> charsets = Charset.availableCharsets();
        for (String charsetName : charsets.keySet()) {
            // charset name
            model.addElement(charsetName);
        }
        return model;
    }

    private DefaultComboBoxModel getEncodingsComboBoxModel() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        Map<Encoding, String> map = JacksumAPI.getAvailableEncodings();
        for (Map.Entry<Encoding, String> entry : map.entrySet()) {
            String key = Encoding.encoding2String(entry.getKey()); // we store a String representation of the Encoding only
            model.addElement(key);
        }
        return model;
    }
   

    private void fillFileListModel() {
        fileListModel.addAll(parameters.getFilenamesFromFilelist());
// TODO
   for (String fn : parameters.getFilenamesFromFilelist()) {
       System.out.println(fn);
   }
        fileListModel.addAll(parameters.getFilenamesFromArgs());
        fileListModel.backup();
    }

    private FileListModel buildFileListModel() {
        FileListModel model = new FileListModel();
        model.addAll(parameters.getFilenamesFromFilelist());
        model.addAll(parameters.getFilenamesFromArgs());
        model.backup();
        return model;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actionButton;
    private javax.swing.JPanel actionPanel;
    private javax.swing.JButton addButton;
    private javax.swing.JPanel advancedActionPanel;
    private javax.swing.JToggleButton advancedModeToggleButton;
    private javax.swing.JLabel algoLabel;
    private javax.swing.JTextField algoTextField;
    private javax.swing.JCheckBox bomCheckBox;
    private javax.swing.JLabel calculateHashesLabel1;
    private javax.swing.JLabel calculateHashesLabel2;
    private javax.swing.JButton clearButton;
    private javax.swing.JPanel customizedFormatPanel;
    private javax.swing.JToggleButton darkThemeToggleButton;
    private javax.swing.JPanel fileInputOptionsPanel;
    private javax.swing.JPanel fileInputPanel;
    private javax.swing.JList<String> fileList;
    private javax.swing.JScrollPane fileListScrollPane;
    private javax.swing.JComboBox<String> fileVerificationCharacterSetComboBox;
    private javax.swing.JLabel fileVerificationCharacterSetLabel;
    private javax.swing.JButton fileVerificationClearButton;
    private javax.swing.JLabel fileVerificationLabel;
    private javax.swing.JButton fileVerificationSelectFileButton;
    private javax.swing.JTextField fileVerificationTextField;
    private javax.swing.JCheckBox followSymlinksToDirectoriesCheckBox;
    private javax.swing.JCheckBox followSymlinksToFilesCheckBox;
    private javax.swing.JCheckBox hashValueEncodingCheckBox;
    private javax.swing.JComboBox<String> hashValueEncodingComboBox;
    private javax.swing.JSpinner hashingThreadsSpinner;
    private javax.swing.JLabel headerDataIntegrityStrengthLabel;
    private javax.swing.JLabel headerFileIntegrityVerificationLabel;
    private javax.swing.JLabel headerOutputFilesLabel;
    private javax.swing.JLabel headerReadFilesAndDirectoriesjLabel;
    private javax.swing.JCheckBox includeFileSizeCheckBox;
    private javax.swing.JCheckBox includeTimestampCheckBox;
    private javax.swing.JLabel levelsWhenTraversingADirectoryLabel;
    private javax.swing.JCheckBox lineFormatCheckBox;
    private javax.swing.JTextField lineFormatTextField;
    private javax.swing.JPanel listModificationPanel;
    private javax.swing.JPanel listSortingPanel;
    private javax.swing.JButton moveBottomButton;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JButton moveTopButton;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JPanel outputFilesPanel;
    private javax.swing.JPanel outputFormatPanel;
    private javax.swing.JPanel outputOptionsPanel;
    private javax.swing.JLabel outputRespIntegrityInputFormatLabel;
    private javax.swing.JComboBox<String> outputStyleComboBox;
    private javax.swing.JLabel parallelThreadsLabel;
    private javax.swing.JTextField pathRelativeToTextField;
    private javax.swing.JComboBox<String> pathStyleComboBox;
    private javax.swing.JLabel pathStyleLabel;
    private javax.swing.JLabel placeholderForCustomFormatOptionsLabel;
    private javax.swing.JLabel placeholderForDataIntegrityStrengthOptionsLabel;
    private javax.swing.JLabel placeholderForFileIntegrityVerificationOptionsLabel;
    private javax.swing.JLabel placeholderForOutputFilesOptionsLabel;
    private javax.swing.JLabel placeholderForReadFilesAndDirectoriesOptionsLabel;
    private javax.swing.JLabel prefixPathsWithLabel;
    private javax.swing.JCheckBox printHeaderCheckBox;
    private javax.swing.JPanel processingOptionsPanel;
    private javax.swing.JPanel processingPanel;
    private javax.swing.JButton quitButton;
    private javax.swing.JCheckBox readingThreadsCheckBox;
    private javax.swing.JSpinner readingThreadsSpinner;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton restoreButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox scanNtfsAdsCheckBox;
    private javax.swing.JButton selectAlgoButton;
    private javax.swing.JCheckBox showFailedFilesCheckBox;
    private javax.swing.JLabel showFilesLabel;
    private javax.swing.JCheckBox showMissingFilesCheckBox;
    private javax.swing.JCheckBox showNewFilesCheckBox;
    private javax.swing.JCheckBox showOkFilesCheckBox;
    private javax.swing.JComboBox<String> standardErrorFileCharacterSetComboBox;
    private javax.swing.JLabel standardErrorFileCharacterSetLabel;
    private javax.swing.JLabel standardErrorFileLabel;
    private javax.swing.JTextField standardErrorFileTextField;
    private javax.swing.JComboBox<String> standardOutputFileCharacterSetComboBox;
    private javax.swing.JLabel standardOutputFileCharacterSetLabel;
    private javax.swing.JLabel standardOutputFileLabel;
    private javax.swing.JTextField standardOutputFileTextField;
    private javax.swing.JLabel styleLabel;
    private javax.swing.JComboBox<String> timestampFormatComboBox;
    private javax.swing.JTextField timestampFormatTextField;
    private javax.swing.JToggleButton verificationModeToggleButton;
    private javax.swing.JPanel verificationOptionsPanel;
    private javax.swing.JPanel verificationPanel;
    private javax.swing.JCheckBox walkingDepthCheckBox;
    private javax.swing.JSpinner walkingDepthSpinner;
    // End of variables declaration//GEN-END:variables

}
